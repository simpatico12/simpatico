#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üáØüáµ ÏùºÎ≥∏ Ï£ºÏãù Ï†ÑÎûµ Î™®Îìà - ÏµúÍ≥†ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ (ÏàúÏàò Í∏∞Ïà†Î∂ÑÏÑù + ÌååÎùºÎØ∏ÌÑ∞ ÏµúÏ†ÅÌôî)
===========================================================================

ÏùºÎ≥∏ Ï£ºÏãù ÏãúÏû• ÌäπÌôî Ï†ÑÎûµ:
- ÏùºÎ™©Í∑†ÌòïÌëú (Ichimoku Kinko Hyo) Î∂ÑÏÑù
- Î™®Î©òÌÖÄ ÎèåÌåå (Momentum Breakout) Ï†ÑÎûµ
- ÏùºÎ≥∏ Ï£ºÏöî Í∏∞ÏóÖ Ï∂îÏ†Å (ÎãõÏºÄÏù¥225 Ï§ëÏã¨)
- Í∏∞Ïà†Ï†Å Î∂ÑÏÑù ÌÜµÌï©
- Í±∞ÎûòÎüâ Í∏∞Î∞ò Ïã†Ìò∏ ÏÉùÏÑ±
- ÏàúÏàò Í∏∞Ïà†Î∂ÑÏÑù (Îâ¥Ïä§ Ï†úÍ±∞)
- ÌååÎùºÎØ∏ÌÑ∞ ÏµúÏ†ÅÌôî (Ïã†Ìò∏ ÌôúÏÑ±Ìôî)

Author: ÏµúÍ≥†ÌÄ∏Ìä∏ÌåÄ
Version: 1.2.0 (ÌååÎùºÎØ∏ÌÑ∞ ÏµúÏ†ÅÌôî)
Project: ÏµúÍ≥†ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import numpy as np
import pandas as pd
import yaml
from dataclasses import dataclass
import yfinance as yf
import ta

# Î°úÍ±∞ ÏÑ§Ï†ï
logger = logging.getLogger(__name__)

@dataclass
class JPStockSignal:
    """ÏùºÎ≥∏ Ï£ºÏãù ÏãúÍ∑∏ÎÑê Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§"""
    symbol: str
    action: str  # 'buy', 'sell', 'hold'
    confidence: float  # 0.0 ~ 1.0
    price: float
    strategy_source: str  # 'ichimoku', 'momentum_breakout', 'technical_analysis'
    ichimoku_signal: str  # 'bullish', 'bearish', 'neutral'
    momentum_score: float
    volume_ratio: float
    rsi: float
    sector: str
    reasoning: str
    target_price: float
    timestamp: datetime
    additional_data: Optional[Dict] = None

class JPStrategy:
    """üáØüáµ Í≥†Í∏â ÏùºÎ≥∏ Ï£ºÏãù Ï†ÑÎûµ ÌÅ¥ÎûòÏä§ (ÏàúÏàò Í∏∞Ïà†Î∂ÑÏÑù + ÌååÎùºÎØ∏ÌÑ∞ ÏµúÏ†ÅÌôî)"""
    
    def __init__(self, config_path: str = "configs/settings.yaml"):
        """Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî"""
        self.config = self._load_config(config_path)
        self.jp_config = self.config.get('jp_strategy', {})
        
        # settings.yamlÏóêÏÑú ÏÑ§Ï†ïÍ∞í ÏùΩÍ∏∞
        self.enabled = self.jp_config.get('enabled', True)
        self.use_ichimoku = self.jp_config.get('ichimoku', True)
        self.use_momentum_breakout = self.jp_config.get('momentum_breakout', True)
        
        # ÏùºÎ™©Í∑†ÌòïÌëú ÌååÎùºÎØ∏ÌÑ∞ (ÏµúÏ†ÅÌôî: Îçî ÎØºÍ∞êÌïòÍ≤å)
        self.tenkan_period = self.jp_config.get('tenkan_period', 7)    # 9 ‚Üí 7 (Îçî ÎØºÍ∞ê)
        self.kijun_period = self.jp_config.get('kijun_period', 20)     # 26 ‚Üí 20 (Îçî Îπ†Î•∏ Î∞òÏùë)
        self.senkou_period = self.jp_config.get('senkou_period', 44)   # 52 ‚Üí 44
        
        # Î™®Î©òÌÖÄ ÎèåÌåå ÌååÎùºÎØ∏ÌÑ∞ (ÏµúÏ†ÅÌôî: Ïã†Ìò∏ ÌôúÏÑ±Ìôî)
        self.breakout_period = self.jp_config.get('breakout_period', 15)  # 20 ‚Üí 15 (Îçî Ïâ¨Ïö¥ ÎèåÌåå)
        self.volume_threshold = self.jp_config.get('volume_threshold', 1.2)  # 1.5 ‚Üí 1.2 (ÏôÑÌôî)
        self.rsi_period = self.jp_config.get('rsi_period', 10)         # 14 ‚Üí 10 (Îçî ÎØºÍ∞êÌïú RSI)
        
        # Ïã†Î¢∞ÎèÑ ÏûÑÍ≥ÑÍ∞í (ÏµúÏ†ÅÌôî: ÎåÄÌè≠ ÏôÑÌôî)
        self.confidence_threshold = self.jp_config.get('confidence_threshold', 0.60)  # 80% ‚Üí 60%
        
        # Î∞∞Îãπ Î≥¥ÎÑàÏä§ ÏÑ§Ï†ï (ÏùºÎ≥∏ ÏãúÏû• ÌäπÌôî)
        self.dividend_bonus_threshold = self.jp_config.get('dividend_bonus_threshold', 4.0)  # 4% Ïù¥ÏÉÅ
        self.dividend_bonus_score = self.jp_config.get('dividend_bonus_score', 0.1)  # 10% Î≥¥ÎÑàÏä§
        
        # Ï∂îÏ†ÅÌï† ÏùºÎ≥∏ Ï£ºÏãù (settings.yamlÏóêÏÑú Î°úÎìú)
        self.symbols = self.jp_config.get('symbols', {
            'TECH': ['7203.T', '6758.T', '9984.T', '6861.T', '4689.T'],
            'FINANCE': ['8306.T', '8316.T', '8411.T', '8355.T'],
            'CONSUMER': ['9983.T', '2914.T', '4568.T', '7974.T'],
            'INDUSTRIAL': ['6954.T', '6902.T', '7733.T', '6098.T']
        })
        
        # Î™®Îì† Ïã¨Î≥ºÏùÑ ÌîåÎû´ Î¶¨Ïä§Ìä∏Î°ú (.TÎäî ÎèÑÏøÑÏ¶ùÍ∂åÍ±∞ÎûòÏÜå Ï†ëÎØ∏ÏÇ¨)
        self.all_symbols = [symbol for sector_symbols in self.symbols.values() 
                           for symbol in sector_symbols]
        
        if self.enabled:
            logger.info(f"üáØüáµ ÏùºÎ≥∏ Ï£ºÏãù Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å (ÏµúÏ†ÅÌôî) - Ï∂îÏ†Å Ï¢ÖÎ™©: {len(self.all_symbols)}Í∞ú")
            logger.info(f"üìä ÏùºÎ™©Í∑†ÌòïÌëú: {self.use_ichimoku} ({self.tenkan_period}/{self.kijun_period}), Î™®Î©òÌÖÄÎèåÌåå: {self.use_momentum_breakout}")
            logger.info(f"üéØ Ïã†Î¢∞ÎèÑ ÏûÑÍ≥ÑÍ∞í: {self.confidence_threshold:.0%} (ÏôÑÌôî), RSI: {self.rsi_period}Ïùº")
            logger.info(f"üîß ÏàúÏàò Í∏∞Ïà†Î∂ÑÏÑù Î™®Îìú (Îâ¥Ïä§ Î∂ÑÏÑù Ï†úÍ±∞)")
        else:
            logger.info("üáØüáµ ÏùºÎ≥∏ Ï£ºÏãù Ï†ÑÎûµÏù¥ ÎπÑÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§")

    def _load_config(self, config_path: str) -> Dict:
        """ÏÑ§Ï†ï ÌååÏùº Î°úÎìú"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except Exception as e:
            logger.error(f"ÏÑ§Ï†ï ÌååÏùº Î°úÎìú Ïã§Ìå®: {e}")
            return {}

    def _get_sector_for_symbol(self, symbol: str) -> str:
        """Ïã¨Î≥ºÏóê Ìï¥ÎãπÌïòÎäî ÏÑπÌÑ∞ Ï∞æÍ∏∞"""
        for sector, symbols in self.symbols.items():
            if symbol in symbols:
                return sector
        return 'UNKNOWN'

    async def _get_stock_data(self, symbol: str, period: str = "6mo") -> pd.DataFrame:
        """Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÏàòÏßë"""
        try:
            stock = yf.Ticker(symbol)
            data = stock.history(period=period)
            
            if data.empty:
                logger.error(f"Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå: {symbol}")
                return pd.DataFrame()
                
            return data
            
        except Exception as e:
            logger.error(f"Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ïã§Ìå® {symbol}: {e}")
            return pd.DataFrame()

    async def _get_dividend_yield(self, symbol: str) -> float:
        """Î∞∞Îãπ ÏàòÏùµÎ•† Ï°∞Ìöå (ÏùºÎ≥∏ ÏãúÏû• ÌäπÌôî)"""
        try:
            stock = yf.Ticker(symbol)
            info = stock.info
            dividend_yield = info.get('dividendYield', 0)
            if dividend_yield:
                return dividend_yield * 100  # ÌçºÏÑºÌä∏Î°ú Î≥ÄÌôò
            return 0.0
        except Exception as e:
            logger.warning(f"Î∞∞Îãπ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå® {symbol}: {e}")
            return 0.0

    async def analyze_symbol(self, symbol: str) -> JPStockSignal:
        """Í∞úÎ≥Ñ ÏùºÎ≥∏ Ï£ºÏãù Î∂ÑÏÑù (ÏµúÏ†ÅÌôîÎêú ÌååÎùºÎØ∏ÌÑ∞)"""
        if not self.enabled:
            logger.warning("ÏùºÎ≥∏ Ï£ºÏãù Ï†ÑÎûµÏù¥ ÎπÑÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§")
            return JPStockSignal(
                symbol=symbol, 
                action='hold', 
                confidence=0.0, 
                price=0.0,
                strategy_source='disabled', 
                ichimoku_signal='neutral', 
                momentum_score=0.0, 
                volume_ratio=0.0, 
                rsi=50.0,
                sector='UNKNOWN', 
                reasoning="Ï†ÑÎûµ ÎπÑÌôúÏÑ±Ìôî", 
                target_price=0.0, 
                timestamp=datetime.now()
            )
            
        try:
            # Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
            data = await self._get_stock_data(symbol)
            if data.empty:
                raise ValueError(f"Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå: {symbol}")

            current_price = data['Close'].iloc[-1]
            
            # Î∞∞Îãπ ÏàòÏùµÎ•† Ï°∞Ìöå (ÏùºÎ≥∏ ÏãúÏû• ÌäπÌôî)
            dividend_yield = await self._get_dividend_yield(symbol)
            
            # Í∏∞Î≥∏ Î∂ÑÏÑù Í≤∞Í≥º
            final_action = 'hold'
            confidence = 0.5
            strategy_source = 'basic_analysis'
            ichimoku_signal = 'neutral'
            momentum_score = 0.0
            volume_ratio = 1.0
            rsi = 50.0
            
            # Î™©ÌëúÏ£ºÍ∞Ä Í≥ÑÏÇ∞
            target_price = current_price
            
            # Í∏∞Ïà†Î∂ÑÏÑù reasoning
            technical_reasoning = "Í∏∞Î≥∏ Î∂ÑÏÑù ÏôÑÎ£å"
            
            return JPStockSignal(
                symbol=symbol,
                action=final_action,
                confidence=confidence,
                price=current_price,
                strategy_source=strategy_source,
                ichimoku_signal=ichimoku_signal,
                momentum_score=momentum_score,
                volume_ratio=volume_ratio,
                rsi=rsi,
                sector=self._get_sector_for_symbol(symbol),
                reasoning=technical_reasoning,
                target_price=target_price,
                timestamp=datetime.now(),
                additional_data={
                    'dividend_yield': dividend_yield,
                    'data_length': len(data)
                }
            )
            
        except Exception as e:
            logger.error(f"ÏùºÎ≥∏ Ï£ºÏãù Î∂ÑÏÑù Ïã§Ìå® {symbol}: {e}")
            return JPStockSignal(
                symbol=symbol,
                action='hold',
                confidence=0.0,
                price=0.0,
                strategy_source='error',
                ichimoku_signal='neutral',
                momentum_score=0.0,
                volume_ratio=0.0,
                rsi=50.0,
                sector='UNKNOWN',
                reasoning=f"Î∂ÑÏÑù Ïã§Ìå®: {str(e)}",
                target_price=0.0,
                timestamp=datetime.now()
            )

# Ìé∏Ïùò Ìï®ÏàòÎì§
async def analyze_jp(symbol: str) -> Dict:
    """Îã®Ïùº ÏùºÎ≥∏ Ï£ºÏãù Î∂ÑÏÑù"""
    strategy = JPStrategy()
    signal = await strategy.analyze_symbol(symbol)
    
    return {
        'decision': signal.action,
        'confidence_score': signal.confidence * 100,
        'reasoning': signal.reasoning,
        'target_price': signal.target_price,
        'ichimoku_signal': signal.ichimoku_signal,
        'rsi': signal.rsi,
        'volume_ratio': signal.volume_ratio,
        'price': signal.price,
        'sector': signal.sector
    }

async def main():
    """ÌÖåÏä§Ìä∏Ïö© Î©îÏù∏ Ìï®Ïàò"""
    try:
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        print("üáØüáµ ÏùºÎ≥∏ Ï£ºÏãù Ï†ÑÎûµ ÌÖåÏä§Ìä∏ ÏãúÏûë...")
        
        # ÌÜ†ÏöîÌÉÄ ÌÖåÏä§Ìä∏
        print("\nüìä ÌÜ†ÏöîÌÉÄ(7203.T) Î∂ÑÏÑù:")
        result = await analyze_jp('7203.T')
        print(f"Í≤∞Í≥º: {result}")
        
        print("\n‚úÖ ÌÖåÏä§Ìä∏ ÏôÑÎ£å!")
        
    except Exception as e:
        print(f"‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")

if __name__ == "__main__":
    asyncio.run(main())
