#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üèÜ ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ ÌÜµÌï© ÏΩîÏñ¥ ÏãúÏä§ÌÖú (core.py)
=================================================
üá∫üá∏ ÎØ∏Íµ≠Ï£ºÏãù + üáØüáµ ÏùºÎ≥∏Ï£ºÏãù + üáÆüá≥ Ïù∏ÎèÑÏ£ºÏãù + üí∞ ÏïîÌò∏ÌôîÌèê (4ÎåÄ Ï†ÑÎûµ ÌÜµÌï©)

‚ú® ÌïµÏã¨ Í∏∞Îä•:
- 4ÎåÄ Ï†ÑÎûµ ÌÜµÌï© Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú
- ÏûêÎèô ÌôòÏ†Ñ Í∏∞Îä• (ÏõêÌôî ‚Üî Îã¨Îü¨/Ïóî/Î£®Ìîº)
- ÎÑ§Ìä∏ÏõåÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ + ÎÅäÍπÄ Ïãú Ï†ÑÎüâ Îß§ÎèÑ
- ÌÜµÌï© Ìè¨ÏßÄÏÖò Í¥ÄÎ¶¨ + Î¶¨Ïä§ÌÅ¨ Ï†úÏñ¥
- Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ + ÏïåÎ¶º ÏãúÏä§ÌÖú
- ÏÑ±Í≥º Ï∂îÏ†Å + ÏûêÎèô Î∞±ÏóÖ
- üö® ÏùëÍ∏â Ïò§Î•ò Í∞êÏßÄ ÏãúÏä§ÌÖú (NEW!)

Author: ÌÄ∏Ìä∏ÎßàÏä§ÌÑ∞ÌåÄ
Version: 1.1.0 (ÏùëÍ∏â Ïò§Î•ò Í∞êÏßÄ ÏãúÏä§ÌÖú Ï∂îÍ∞Ä)
"""

import asyncio
import logging
import os
import sys
import json
import time
import threading
import psutil
import socket
import requests
import sqlite3
import signal
from datetime import datetime, timedelta
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Any
import numpy as np
import pandas as pd
from dotenv import load_dotenv
import yaml
import pickle
import aiohttp
import smtplib
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart

# Ï†ÑÎûµÎ≥Ñ Î™®Îìà ÏûÑÌè¨Ìä∏
try:
    from us_strategy import LegendaryQuantStrategy as USStrategy
    US_AVAILABLE = True
except ImportError:
    US_AVAILABLE = False
    print("‚ö†Ô∏è US Strategy Î™®Îìà ÏóÜÏùå")

try:
    from jp_strategy import YenHunter as JPStrategy
    JP_AVAILABLE = True
except ImportError:
    JP_AVAILABLE = False
    print("‚ö†Ô∏è Japan Strategy Î™®Îìà ÏóÜÏùå")

try:
    from inda_strategy import LegendaryIndiaStrategy as INStrategy
    IN_AVAILABLE = True
except ImportError:
    IN_AVAILABLE = False
    print("‚ö†Ô∏è India Strategy Î™®Îìà ÏóÜÏùå")

try:
    from coin_strategy import LegendaryQuantMaster as CryptoStrategy
    CRYPTO_AVAILABLE = True
except ImportError:
    CRYPTO_AVAILABLE = False
    print("‚ö†Ô∏è Crypto Strategy Î™®Îìà ÏóÜÏùå")

# IBKR API
try:
    from ib_insync import *
    IBKR_AVAILABLE = True
except ImportError:
    IBKR_AVAILABLE = False
    print("‚ö†Ô∏è IBKR API ÏóÜÏùå")

# ÏóÖÎπÑÌä∏ API
try:
    import pyupbit
    UPBIT_AVAILABLE = True
except ImportError:
    UPBIT_AVAILABLE = False
    print("‚ö†Ô∏è Upbit API ÏóÜÏùå")

# ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú
load_dotenv()

# Ïò§Î•ò Í∏∞Î∞ò ÏùëÍ∏âÎß§ÎèÑ ÏÑ§Ï†ï
EMERGENCY_SELL_ON_ERROR = os.getenv('EMERGENCY_SELL_ON_ERROR', 'true').lower() == 'true'
EMERGENCY_MEMORY_THRESHOLD = float(os.getenv('EMERGENCY_MEMORY_THRESHOLD', '95'))  # 95%
EMERGENCY_CPU_THRESHOLD = float(os.getenv('EMERGENCY_CPU_THRESHOLD', '90'))  # 90%
EMERGENCY_DISK_THRESHOLD = float(os.getenv('EMERGENCY_DISK_THRESHOLD', '5'))  # 5GB
EMERGENCY_ERROR_COUNT = int(os.getenv('EMERGENCY_ERROR_COUNT', '5'))  # 5Ìöå Ïó∞ÏÜç
EMERGENCY_GRACE_PERIOD = int(os.getenv('EMERGENCY_GRACE_PERIOD', '60'))  # 60Ï¥à

# ÌôòÏú® API ÏÑ§Ï†ï
EXCHANGE_RATE_API_KEY = os.getenv('EXCHANGE_RATE_API_KEY', '')

# ÎÑ§Ìä∏ÏõåÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ ÏÑ§Ï†ï
NETWORK_CHECK_INTERVAL = int(os.getenv('NETWORK_CHECK_INTERVAL', '30'))
NETWORK_TIMEOUT = int(os.getenv('NETWORK_TIMEOUT', '10'))
NETWORK_MAX_FAILURES = int(os.getenv('NETWORK_MAX_FAILURES', '3'))
NETWORK_GRACE_PERIOD = int(os.getenv('NETWORK_GRACE_PERIOD', '300'))
NETWORK_DISCONNECT_SELL_ALL = os.getenv('NETWORK_DISCONNECT_SELL_ALL', 'false').lower() == 'true'

# Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï
DATABASE_PATH = os.getenv('DATABASE_PATH', './data/quint_core.db')
BACKUP_ENABLED = os.getenv('BACKUP_ENABLED', 'true').lower() == 'true'
BACKUP_PATH = os.getenv('BACKUP_PATH', './backups/')

# ÏïåÎ¶º ÏÑ§Ï†ï
TELEGRAM_ENABLED = os.getenv('TELEGRAM_ENABLED', 'false').lower() == 'true'
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')
EMAIL_ENABLED = os.getenv('EMAIL_ENABLED', 'false').lower() == 'true'
EMAIL_SMTP_SERVER = os.getenv('EMAIL_SMTP_SERVER', 'smtp.gmail.com')
EMAIL_SMTP_PORT = int(os.getenv('EMAIL_SMTP_PORT', '587'))
EMAIL_USERNAME = os.getenv('EMAIL_USERNAME', '')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD', '')
EMAIL_TO = os.getenv('EMAIL_TO', '')

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(name)s | %(levelname)s | %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('quint_core.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# ============================================================================
# üö® ÏùëÍ∏â Ïò§Î•ò Í∞êÏßÄ ÏãúÏä§ÌÖú
# ============================================================================

class EmergencyErrorMonitor:
    """ÏùëÍ∏â Ïò§Î•ò Í∞êÏßÄ Î∞è ÎåÄÏùë ÏãúÏä§ÌÖú"""
    
    def __init__(self, core_system):
        self.core_system = core_system
        self.error_counts = {}  # Ï†ÑÎûµÎ≥Ñ Ïò§Î•ò Ïπ¥Ïö¥ÌÑ∞
        self.last_emergency_time =             
            print(f"üìä Ïò§Î•ò Î∞úÏÉù Ï†ÑÎûµ: {error_summary['total_strategies_with_errors']}Í∞ú")
                        print(f"‚è∞ ÎßàÏßÄÎßâ ÏùëÍ∏âÎß§ÎèÑ: {error_summary.get('last_emergency_time', 'ÏóÜÏùå')}")
            
            print(f"\nüìã Ï†ÑÎûµÎ≥Ñ Ïò§Î•ò ÌòÑÌô©:")
            if error_summary.get('error_counts'):
                for strategy, count in error_summary['error_counts'].items():
                    print(f"  üìå {strategy}: {count}Ìöå Ïò§Î•ò")
                    
                    # ÏÉÅÏÑ∏ Ïò§Î•ò Ï†ïÎ≥¥ ÌëúÏãú
                    if strategy in self.core.error_monitor.error_counts:
                        error_details = self.core.error_monitor.error_counts[strategy]
                        last_error = error_details.get('last_error_time')
                        if last_error:
                            print(f"    ÎßàÏßÄÎßâ Ïò§Î•ò: {last_error.strftime('%Y-%m-%d %H:%M:%S')}")
                        
                        # ÏµúÍ∑º Ïò§Î•ò 3Í∞ú ÌëúÏãú
                        recent_errors = error_details.get('errors', [])[-3:]
                        if recent_errors:
                            print(f"    ÏµúÍ∑º Ïò§Î•ò:")
                            for i, error in enumerate(recent_errors, 1):
                                error_time = error['timestamp'][:19]  # YYYY-MM-DD HH:MM:SS
                                error_msg = error['error'][:50] + '...' if len(error['error']) > 50 else error['error']
                                print(f"      {i}. {error_time}: {error_msg}")
            else:
                print("  ‚úÖ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌïú Ï†ÑÎûµÏù¥ ÏóÜÏäµÎãàÎã§.")
            
            print(f"\nüîß ÏùëÍ∏âÎß§ÎèÑ ÏÑ§Ï†ï:")
            print(f"  Î©îÎ™®Î¶¨ ÏûÑÍ≥ÑÏπò: {EMERGENCY_MEMORY_THRESHOLD}%")
            print(f"  CPU ÏûÑÍ≥ÑÏπò: {EMERGENCY_CPU_THRESHOLD}%")
            print(f"  ÎîîÏä§ÌÅ¨ ÏûÑÍ≥ÑÏπò: {EMERGENCY_DISK_THRESHOLD}GB")
            print(f"  Ïó∞ÏÜç Ïò§Î•ò ÏûÑÍ≥ÑÏπò: {EMERGENCY_ERROR_COUNT}Ìöå")
            print(f"  Ïú†Ïòà ÏãúÍ∞Ñ: {EMERGENCY_GRACE_PERIOD}Ï¥à")
            
            # ÌòÑÏû¨ ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ ÏÉÅÌÉú
            memory_usage = psutil.virtual_memory().percent
            cpu_usage = psutil.cpu_percent()
            disk_free = psutil.disk_usage('/').free / (1024**3)
            
            print(f"\nüíª ÌòÑÏû¨ ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§:")
            mem_status = "‚ö†Ô∏è" if memory_usage >= EMERGENCY_MEMORY_THRESHOLD else "‚úÖ"
            cpu_status = "‚ö†Ô∏è" if cpu_usage >= EMERGENCY_CPU_THRESHOLD else "‚úÖ"
            disk_status = "‚ö†Ô∏è" if disk_free <= EMERGENCY_DISK_THRESHOLD else "‚úÖ"
            
            print(f"  {mem_status} Î©îÎ™®Î¶¨: {memory_usage:.1f}%")
            print(f"  {cpu_status} CPU: {cpu_usage:.1f}%")
            print(f"  {disk_status} ÎîîÏä§ÌÅ¨ Ïó¨Ïú†Í≥µÍ∞Ñ: {disk_free:.1f}GB")
            
            # Ïò§Î•ò Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã ÏòµÏÖò
            print(f"\nüîÑ Í¥ÄÎ¶¨ ÏòµÏÖò:")
            print("  r: Î™®Îì† Ïò§Î•ò Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã")
            print("  Enter: ÎèåÏïÑÍ∞ÄÍ∏∞")
            
            choice = input("\nÏÑ†ÌÉùÌïòÏÑ∏Ïöî: ").strip().lower()
            if choice == 'r':
                self.core.error_monitor.reset_error_counts()
                print("‚úÖ Î™®Îì† Ïò§Î•ò Ïπ¥Ïö¥ÌÑ∞Í∞Ä Î¶¨ÏÖãÎêòÏóàÏäµÎãàÎã§.")
                await asyncio.sleep(2)
            
        except Exception as e:
            print(f"‚ùå Ïò§Î•ò ÌòÑÌô© Ï°∞Ìöå Ïã§Ìå®: {e}")
        
        input("\nÍ≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")
    
    async def _show_portfolio(self):
        """Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÉÅÏÑ∏ ÌëúÏãú"""
        if not self.core:
            print("‚ùå ÏãúÏä§ÌÖúÏù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            return
        
        print("\nüíº Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÉÅÏÑ∏ ÌòÑÌô©")
        print("="*60)
        
        try:
            summary = self.core.position_manager.get_portfolio_summary()
            
            # Ï†ÑÏ≤¥ ÏöîÏïΩ
            print(f"üìä Ï†ÑÏ≤¥ ÏöîÏïΩ:")
            print(f"  Ï¥ù Ìè¨ÏßÄÏÖò: {summary.get('total_positions', 0)}Í∞ú")
            print(f"  Ï¥ù Í∞ÄÏπò: {summary.get('total_krw_value', 0):,.0f}Ïõê")
            print(f"  ÎØ∏Ïã§ÌòÑ ÏÜêÏùµ: {summary.get('total_unrealized_pnl', 0):+,.0f}Ïõê")
            print(f"  Ï¥ù ÏàòÏùµÎ•†: {summary.get('total_return_pct', 0):+.2f}%")
            
            # Ï†ÑÎûµÎ≥Ñ Î∂ÑÏÑù
            print(f"\nüéØ Ï†ÑÎûµÎ≥Ñ Î∂ÑÏÑù:")
            for strategy, data in summary.get('by_strategy', {}).items():
                print(f"  {strategy}:")
                print(f"    Ìè¨ÏßÄÏÖò: {data['count']}Í∞ú")
                print(f"    Í∞ÄÏπò: {data['krw_value']:,.0f}Ïõê")
                print(f"    ÏÜêÏùµ: {data['unrealized_pnl']:+,.0f}Ïõê")
            
            # ÌÜµÌôîÎ≥Ñ Î∂ÑÏÑù
            print(f"\nüí± ÌÜµÌôîÎ≥Ñ Î∂ÑÏÑù:")
            for currency, data in summary.get('by_currency', {}).items():
                print(f"  {currency}: {data['count']}Í∞ú Ìè¨ÏßÄÏÖò, {data['krw_value']:,.0f}Ïõê")
            
            # ÏÉÅÏúÑ/ÌïòÏúÑ Ï¢ÖÎ™©
            print(f"\nüèÜ ÏÉÅÏúÑ ÏàòÏùµ Ï¢ÖÎ™©:")
            for gainer in summary.get('top_gainers', [])[:5]:
                print(f"  {gainer['symbol']} ({gainer['strategy']}): {gainer['pnl_pct']:+.1f}%")
            
            print(f"\nüíî ÌïòÏúÑ ÏàòÏùµ Ï¢ÖÎ™©:")
            for loser in summary.get('top_losers', [])[:5]:
                print(f"  {loser['symbol']} ({loser['strategy']}): {loser['pnl_pct']:+.1f}%")
            
        except Exception as e:
            print(f"‚ùå Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï°∞Ìöå Ïã§Ìå®: {e}")
        
        input("\nÍ≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")
    
    async def _show_network_status(self):
        """ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú ÏÉÅÏÑ∏ ÌëúÏãú"""
        if not self.core:
            print("‚ùå ÏãúÏä§ÌÖúÏù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            return
        
        print("\nüåê ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú ÏÉÅÏÑ∏")
        print("="*40)
        
        try:
            status = self.core.network_monitor.get_network_status()
            
            print(f"Ïó∞Í≤∞ ÏÉÅÌÉú: {'‚úÖ Ï†ïÏÉÅ' if status['is_connected'] else '‚ùå ÎÅäÍπÄ'}")
            print(f"ÏßÄÏó∞ÏãúÍ∞Ñ: {status['latency_ms']:.1f}ms")
            print(f"Ïó∞ÏÜç Ïã§Ìå®: {status['consecutive_failures']}Ìöå")
            print(f"Í∞ÄÎèôÎ•†: {status['uptime_percentage']:.2f}%")
            print(f"Ï¥ù Ï≤¥ÌÅ¨: {status['total_checks']}Ìöå")
            print(f"ÎßàÏßÄÎßâ Ï≤¥ÌÅ¨: {status['last_check']}")
            print(f"ÏùëÍ∏â Îß§ÎèÑ: {'‚úÖ ÌôúÏÑ±Ìôî' if status['emergency_sell_enabled'] else '‚ùå ÎπÑÌôúÏÑ±Ìôî'}")
            
        except Exception as e:
            print(f"‚ùå ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú Ï°∞Ìöå Ïã§Ìå®: {e}")
        
        input("\nÍ≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")
    
    async def _show_currency_rates(self):
        """ÌôòÏú® Ï†ïÎ≥¥ ÌëúÏãú"""
        if not self.core:
            print("‚ùå ÏãúÏä§ÌÖúÏù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            return
        
        print("\nüí± ÌòÑÏû¨ ÌôòÏú® Ï†ïÎ≥¥")
        print("="*30)
        
        try:
            if self.core.currency_exchange.last_update:
                print(f"‚è∞ ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: {self.core.currency_exchange.last_update.strftime('%Y-%m-%d %H:%M:%S')}")
            
            print(f"\nüí∞ ÌôòÏú®:")
            for currency, info in self.core.currency_exchange.exchange_rates.items():
                if currency != 'KRW':
                    print(f"  {currency} ({info.name}): {info.exchange_rate:,.1f}Ïõê")
            
            # ÌôòÏ†Ñ Í≥ÑÏÇ∞Í∏∞
            print(f"\nüîÑ Í∞ÑÎã® ÌôòÏ†Ñ Í≥ÑÏÇ∞Í∏∞:")
            amount = input("Í∏àÏï° ÏûÖÎ†• (ÏõêÌôî): ").strip()
            if amount.isdigit():
                krw_amount = float(amount)
                print(f"  USD: ${krw_amount / self.core.currency_exchange.get_exchange_rate('USD'):,.2f}")
                print(f"  JPY: ¬•{krw_amount / self.core.currency_exchange.get_exchange_rate('JPY'):,.0f}")
                print(f"  INR: ‚Çπ{krw_amount / self.core.currency_exchange.get_exchange_rate('INR'):,.0f}")
            
        except Exception as e:
            print(f"‚ùå ÌôòÏú® Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®: {e}")
        
        input("\nÍ≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")
    
    async def _manage_strategies(self):
        """Ï†ÑÎûµ Í¥ÄÎ¶¨"""
        if not self.core:
            print("‚ùå ÏãúÏä§ÌÖúÏù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            return
        
        print("\nüéØ Ï†ÑÎûµ Í¥ÄÎ¶¨")
        print("="*30)
        
        print(f"ÌôúÏÑ± Ï†ÑÎûµ: {list(self.core.strategies.keys())}")
        
        # Ï†ÑÎûµÎ≥Ñ Ïò§Î•ò ÌòÑÌô© ÌëúÏãú
        error_summary = self.core.error_monitor.get_error_summary()
        if error_summary.get('error_counts'):
            print(f"\n‚ö†Ô∏è Ï†ÑÎûµÎ≥Ñ Ïò§Î•ò ÌòÑÌô©:")
            for strategy, count in error_summary['error_counts'].items():
                print(f"  {strategy}: {count}Ìöå")
        
        print("\n‚öôÔ∏è Í¥ÄÎ¶¨ ÏòµÏÖò:")
        print("  r: ÌäπÏ†ï Ï†ÑÎûµ Ïò§Î•ò Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã")
        print("  Enter: ÎèåÏïÑÍ∞ÄÍ∏∞")
        
        choice = input("\nÏÑ†ÌÉùÌïòÏÑ∏Ïöî: ").strip().lower()
        if choice == 'r':
            strategy = input("Ï†ÑÎûµ Ïù¥Î¶Ñ ÏûÖÎ†•: ").strip()
            if strategy in self.core.error_monitor.error_counts:
                self.core.error_monitor.reset_error_counts(strategy)
                print(f"‚úÖ {strategy} Ï†ÑÎûµÏùò Ïò§Î•ò Ïπ¥Ïö¥ÌÑ∞Í∞Ä Î¶¨ÏÖãÎêòÏóàÏäµÎãàÎã§.")
            else:
                print(f"‚ùå {strategy} Ï†ÑÎûµÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
            await asyncio.sleep(2)
        
        input("\nÍ≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")
    
    async def _show_performance_report(self):
        """ÏÑ±Í≥º Î¶¨Ìè¨Ìä∏ ÌëúÏãú"""
        if not self.core:
            print("‚ùå ÏãúÏä§ÌÖúÏù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            return
        
        print("\nüìà ÏÑ±Í≥º Î¶¨Ìè¨Ìä∏")
        print("="*40)
        
        try:
            # Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏöîÏïΩÏóêÏÑú ÏÑ±Í≥º Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
            summary = self.core.position_manager.get_portfolio_summary()
            
            print(f"üìä ÌòÑÏû¨ ÏÑ±Í≥º:")
            print(f"  Ï¥ù Ìà¨ÏûêÍ∏àÏï°: {summary.get('total_krw_value', 0) - summary.get('total_unrealized_pnl', 0):,.0f}Ïõê")
            print(f"  ÌòÑÏû¨ Í∞ÄÏπò: {summary.get('total_krw_value', 0):,.0f}Ïõê")
            print(f"  ÎØ∏Ïã§ÌòÑ ÏÜêÏùµ: {summary.get('total_unrealized_pnl', 0):+,.0f}Ïõê")
            print(f"  ÏàòÏùµÎ•†: {summary.get('total_return_pct', 0):+.2f}%")
            
            # ÏõîÍ∞Ñ Î™©Ìëú ÎåÄÎπÑ
            monthly_target = 6.0  # Í∏∞Î≥∏ 6%
            progress = summary.get('total_return_pct', 0)
            print(f"\nüéØ ÏõîÍ∞Ñ Î™©Ìëú ÎåÄÎπÑ:")
            print(f"  Î™©Ìëú: {monthly_target}%")
            print(f"  ÌòÑÏû¨: {progress:+.2f}%")
            print(f"  Îã¨ÏÑ±Î•†: {(progress / monthly_target * 100) if monthly_target > 0 else 0:.1f}%")
            
        except Exception as e:
            print(f"‚ùå ÏÑ±Í≥º Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
        
        input("\nÍ≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")
    
    async def _emergency_sell(self):
        """ÏùëÍ∏â Îß§ÎèÑ"""
        if not self.core:
            print("‚ùå ÏãúÏä§ÌÖúÏù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            return
        
        print("\nüö® ÏùëÍ∏â Ï†ÑÎüâ Îß§ÎèÑ")
        print("="*30)
        print("‚ö†Ô∏è Í≤ΩÍ≥†: Î™®Îì† Ìè¨ÏßÄÏÖòÏùÑ Ï¶âÏãú Îß§ÎèÑÌï©ÎãàÎã§!")
        print("Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.")
        
        confirm1 = input("\nÏ†ïÎßê ÏßÑÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå? (yes/no): ").strip().lower()
        if confirm1 != 'yes':
            print("‚ùå Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.")
            return
        
        confirm2 = input("Ìïú Î≤à Îçî ÌôïÏù∏Ìï©ÎãàÎã§. ÏùëÍ∏â Îß§ÎèÑÎ•º Ïã§ÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå? (EMERGENCY): ").strip()
        if confirm2 != 'EMERGENCY':
            print("‚ùå Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.")
            return
        
        print("üö® ÏùëÍ∏â Îß§ÎèÑÎ•º Ïã§ÌñâÌï©ÎãàÎã§...")
        
        try:
            await self.core.emergency_sell_all("USER_REQUESTED")
            print("‚úÖ ÏùëÍ∏â Îß§ÎèÑ ÏöîÏ≤≠Ïù¥ Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§.")
            print("Ïã§Ï†ú Îß§ÎèÑ Í≤∞Í≥ºÎäî Í∞Å Í±∞ÎûòÏÜåÏùò ÏùëÎãµÏóê Îî∞Îùº Îã¨ÎùºÏßà Ïàò ÏûàÏäµÎãàÎã§.")
            
        except Exception as e:
            print(f"‚ùå ÏùëÍ∏â Îß§ÎèÑ Ïã§Ìñâ Ïã§Ìå®: {e}")
        
        input("\nÍ≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")
    
    async def _shutdown_system(self):
        """ÏãúÏä§ÌÖú Ï¢ÖÎ£å"""
        if not self.core:
            print("‚ùå ÏãúÏä§ÌÖúÏù¥ Ïù¥ÎØ∏ Ï¢ÖÎ£åÎêòÏñ¥ ÏûàÏäµÎãàÎã§.")
            return
        
        print("\nüõë ÏãúÏä§ÌÖú Ï¢ÖÎ£å")
        print("="*20)
        
        confirm = input("ÏãúÏä§ÌÖúÏùÑ Ï¢ÖÎ£åÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): ").strip().lower()
        if confirm == 'y':
            print("üõë ÏãúÏä§ÌÖúÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§...")
            await self.core.shutdown()
            self.core = None
            print("‚úÖ ÏãúÏä§ÌÖúÏù¥ ÏïàÏ†ÑÌïòÍ≤å Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.")
        
        input("\nÍ≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")

# ============================================================================
# üöÄ Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò
# ============================================================================

async def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    try:
        cli = QuintCLI()
        await cli.start_interactive_mode()
        
    except KeyboardInterrupt:
        print("\nüëã ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§.")
    except Exception as e:
        print(f"‚ùå Ïã§Ìñâ Ïò§Î•ò: {e}")
        logger.error(f"Î©îÏù∏ Ïã§Ìñâ Ïò§Î•ò: {e}")
        
        # ÏπòÎ™ÖÏ†Å Ïò§Î•ò Ïãú ÏùëÍ∏â Îß§ÎèÑ
        if EMERGENCY_SELL_ON_ERROR:
            try:
                # ÏΩîÏñ¥ ÏãúÏä§ÌÖúÏù¥ ÏûàÎã§Î©¥ ÏùëÍ∏â Îß§ÎèÑ ÏãúÎèÑ
                if hasattr(cli, 'core') and cli.core:
                    await cli.core.emergency_sell_all(f"CRITICAL_ERROR: {str(e)}")
                    print("üö® ÏπòÎ™ÖÏ†Å Ïò§Î•òÎ°ú Ïù∏Ìïú ÏùëÍ∏â Îß§ÎèÑ Ïã§ÌñâÎê®")
            except Exception as emergency_error:
                logger.error(f"ÏùëÍ∏â Îß§ÎèÑ Ïã§Ìñâ Ïã§Ìå®: {emergency_error}")
                print(f"‚ùå ÏùëÍ∏â Îß§ÎèÑ Ïã§Ìñâ Ïã§Ìå®: {emergency_error}")

if __name__ == "__main__":
    # Ïù¥Î≤§Ìä∏ Î£®ÌîÑ Ïã§Ìñâ
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.")
    except Exception as e:
        print(f"‚ùå ÏãúÏä§ÌÖú Ïò§Î•ò: {e}")
        # ÏµúÏ¢Ö ÏïàÏ†ÑÏû•Ïπò - ÏãúÏä§ÌÖú Î†àÎ≤® Ïò§Î•ò Ïãú Î°úÍ∑∏Îßå Í∏∞Î°ù
        logger.critical(f"ÏãúÏä§ÌÖú Î†àÎ≤® Ïò§Î•ò: {e}")
        if EMERGENCY_SELL_ON_ERROR:
            print("üö® ÏãúÏä§ÌÖú Î†àÎ≤® Ïò§Î•ò Í∞êÏßÄ - ÏàòÎèôÏúºÎ°ú Ìè¨ÏßÄÏÖò ÌôïÏù∏ ÌïÑÏöî")
                f"ÌôòÍ≤Ω: {self.config.get('system', {}).get('environment', 'unknown')}"
            )
            
            # Î∞±Í∑∏ÎùºÏö¥Îìú ÌÉúÏä§ÌÅ¨ ÏãúÏûë
            tasks = [
                asyncio.create_task(self._main_loop()),
                asyncio.create_task(self.network_monitor.start_monitoring()),
                asyncio.create_task(self._periodic_tasks())
            ]
            
            # Î™®Îì† ÌÉúÏä§ÌÅ¨ Ïã§Ìñâ
            await asyncio.gather(*tasks)
            
        except Exception as e:
            logger.error(f"ÏãúÏä§ÌÖú ÏãúÏûë Ïã§Ìå®: {e}")
            self.error_monitor.record_strategy_error('system_start', e)
            await self.shutdown()
    
    async def _main_loop(self):
        """Î©îÏù∏ Ïã§Ìñâ Î£®ÌîÑ"""
        logger.info("üîÑ Î©îÏù∏ Î£®ÌîÑ ÏãúÏûë")
        
        while self.is_running:
            try:
                # Í±¥Í∞ï ÏÉÅÌÉú Ï≤¥ÌÅ¨
                await self._health_check()
                
                # Ï†ÑÎûµÎ≥Ñ Ïã§Ìñâ (Ïä§ÏºÄÏ§Ñ Í∏∞Î∞ò)
                await self._execute_strategies()
                
                # Ìè¨ÏßÄÏÖò ÏóÖÎç∞Ïù¥Ìä∏
                await self._update_positions()
                
                # 5Î∂Ñ ÎåÄÍ∏∞
                await asyncio.sleep(300)
                
            except Exception as e:
                logger.error(f"Î©îÏù∏ Î£®ÌîÑ Ïò§Î•ò: {e}")
                self.error_monitor.record_strategy_error('main_loop', e)
                await asyncio.sleep(60)  # 1Î∂Ñ ÌõÑ Ïû¨ÏãúÎèÑ
    
    async def _periodic_tasks(self):
        """Ï£ºÍ∏∞Ï†Å ÌÉúÏä§ÌÅ¨"""
        while self.is_running:
            try:
                # ÌôòÏú® ÏóÖÎç∞Ïù¥Ìä∏ (5Î∂ÑÎßàÎã§)
                await self.currency_exchange.update_exchange_rates()
                
                # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∞±ÏóÖ (1ÏãúÍ∞ÑÎßàÎã§)
                if datetime.now().minute == 0:
                    self.data_manager.backup_database()
                
                # ÏÑ±Í≥º Î¶¨Ìè¨Ìä∏ (ÌïòÎ£® 1Ìöå)
                if datetime.now().hour == 9 and datetime.now().minute == 0:
                    await self._generate_daily_report()
                
                await asyncio.sleep(300)  # 5Î∂Ñ ÎåÄÍ∏∞
                
            except Exception as e:
                logger.error(f"Ï£ºÍ∏∞Ï†Å ÌÉúÏä§ÌÅ¨ Ïò§Î•ò: {e}")
                self.error_monitor.record_strategy_error('periodic_tasks', e)
                await asyncio.sleep(300)
    
    async def _health_check(self):
        """ÏãúÏä§ÌÖú Í±¥Í∞ï ÏÉÅÌÉú Ï≤¥ÌÅ¨"""
        try:
            current_time = datetime.now()
            
            # ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ ÏùëÍ∏â Ï≤¥ÌÅ¨
            await self.error_monitor.check_system_resources()
            
            # Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Ï≤¥ÌÅ¨
            memory_usage = psutil.virtual_memory().percent
            if memory_usage > 80:
                logger.warning(f"‚ö†Ô∏è Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ ÎÜíÏùå: {memory_usage:.1f}%")
            
            # ÎîîÏä§ÌÅ¨ ÏÇ¨Ïö©Îüâ Ï≤¥ÌÅ¨
            disk_usage = psutil.disk_usage('/').percent
            if disk_usage > 90:
                logger.warning(f"‚ö†Ô∏è ÎîîÏä§ÌÅ¨ ÏÇ¨Ïö©Îüâ ÎÜíÏùå: {disk_usage:.1f}%")
            
            # ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú Ï≤¥ÌÅ¨Îäî Î≥ÑÎèÑ Î™®ÎãàÌÑ∞ÏóêÏÑú Ï≤òÎ¶¨
            
            self.last_health_check = current_time
            
        except Exception as e:
            logger.error(f"Í±¥Í∞ï ÏÉÅÌÉú Ï≤¥ÌÅ¨ Ïã§Ìå®: {e}")
            # Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏûêÏ≤¥ Ïã§Ìå®ÎèÑ Ïò§Î•òÎ°ú Í∏∞Î°ù
            self.error_monitor.record_strategy_error('health_check', e)
    
    async def _execute_strategies(self):
        """Ï†ÑÎûµ Ïã§Ìñâ"""
        try:
            for strategy_name, strategy in self.strategies.items():
                try:
                    # Í∞Å Ï†ÑÎûµÏùò Ïä§ÏºÄÏ§Ñ Ï≤¥ÌÅ¨ Î∞è Ïã§Ìñâ
                    if await self._should_execute_strategy(strategy_name):
                        logger.info(f"üéØ {strategy_name} Ï†ÑÎûµ Ïã§Ìñâ")
                        await self._run_strategy(strategy_name, strategy)
                
                except Exception as e:
                    logger.error(f"Ï†ÑÎûµ Ïã§Ìñâ Ïã§Ìå® {strategy_name}: {e}")
                    # Ï†ÑÎûµ Ïò§Î•ò Í∏∞Î°ù
                    self.error_monitor.record_strategy_error(strategy_name, e)
                    # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÎèÑ Ïò§Î•ò Î°úÍ∑∏ Ï†ÄÏû•
                    import traceback
                    self.data_manager.save_error_log(strategy_name, 'execution_error', str(e), traceback.format_exc())
                    continue
                    
        except Exception as e:
            logger.error(f"Ï†ÑÎûµ Ïã§Ìñâ Ïò§Î•ò: {e}")
            # Ï†ÑÏ≤¥ Ï†ÑÎûµ Ïã§Ìñâ Ïò§Î•òÎèÑ Í∏∞Î°ù
            self.error_monitor.record_strategy_error('strategy_execution', e)
    
    async def _should_execute_strategy(self, strategy_name: str) -> bool:
        """Ï†ÑÎûµ Ïã§Ìñâ Ïó¨Î∂Ä Í≤∞Ï†ï"""
        try:
            now = datetime.now()
            
            # ÏùëÍ∏â Î™®ÎìúÏóêÏÑúÎäî Ïã§ÌñâÌïòÏßÄ ÏïäÏùå
            if self.emergency_mode:
                return False
            
            # Ï†ÑÎûµÎ≥Ñ Ïä§ÏºÄÏ§Ñ Ï≤¥ÌÅ¨ (Í∞ÑÎã®Ìïú Î≤ÑÏ†Ñ)
            if strategy_name == 'us':
                # ÎØ∏Íµ≠: ÏõîÏöîÏùº, Î™©ÏöîÏùº
                return now.weekday() in [0, 3] and now.hour == 10
            elif strategy_name == 'japan':
                # ÏùºÎ≥∏: ÌôîÏöîÏùº, Î™©ÏöîÏùº
                return now.weekday() in [1, 3] and now.hour == 9
            elif strategy_name == 'india':
                # Ïù∏ÎèÑ: ÏàòÏöîÏùº
                return now.weekday() == 2 and now.hour == 9
            elif strategy_name == 'crypto':
                # ÏïîÌò∏ÌôîÌèê: ÏõîÏöîÏùº, Í∏àÏöîÏùº
                return now.weekday() in [0, 4] and now.hour == 9
            
            return False
            
        except Exception as e:
            logger.error(f"Ï†ÑÎûµ Ïã§Ìñâ Ïó¨Î∂Ä Ï≤¥ÌÅ¨ Ïã§Ìå®: {e}")
            self.error_monitor.record_strategy_error('schedule_check', e)
            return False
    
    async def _run_strategy(self, strategy_name: str, strategy):
        """Í∞úÎ≥Ñ Ï†ÑÎûµ Ïã§Ìñâ"""
        try:
            # Ï†ÑÎûµÎ≥Ñ Ïã§Ìñâ Î∞©Î≤ïÏù¥ Îã§Î•º Ïàò ÏûàÏúºÎØÄÎ°ú Î∂ÑÍ∏∞
            if strategy_name == 'us':
                signals = await strategy.scan_all_stocks()
                for signal in signals:
                    if signal.action == 'BUY':
                        # Ìè¨ÏßÄÏÖò Ï∂îÍ∞Ä Î°úÏßÅ
                        self.position_manager.add_position(
                            strategy_name, signal.symbol, 
                            100, signal.price, 'USD'  # ÏûÑÏãúÍ∞í
                        )
            
            elif strategy_name == 'crypto':
                signals = await strategy.execute_legendary_strategy()
                for signal in signals:
                    if signal.action == 'BUY':
                        self.position_manager.add_position(
                            strategy_name, signal.symbol,
                            signal.total_investment / signal.price, 
                            signal.price, 'KRW'
                        )
            
            # Îã§Î•∏ Ï†ÑÎûµÎì§ÎèÑ Ïú†ÏÇ¨ÌïòÍ≤å Ï≤òÎ¶¨...
            
        except Exception as e:
            logger.error(f"Ï†ÑÎûµ Ïã§Ìñâ Ïò§Î•ò {strategy_name}: {e}")
            self.error_monitor.record_strategy_error(strategy_name, e)
    
    async def _update_positions(self):
        """Ìè¨ÏßÄÏÖò ÌòÑÏû¨Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏"""
        try:
            # Í∞Å Ï†ÑÎûµÎ≥ÑÎ°ú ÌòÑÏû¨Í∞Ä Ï°∞Ìöå
            price_data = {}
            
            for strategy_name in self.strategies.keys():
                strategy_prices = {}
                
                # Ï†ÑÎûµÎ≥Ñ Ìè¨ÏßÄÏÖò ÌòÑÏû¨Í∞Ä Ï°∞Ìöå Î°úÏßÅ
                # Ïã§Ï†ú Íµ¨ÌòÑÏãúÏóêÎäî Í∞Å Ï†ÑÎûµÏùò APIÎ•º ÏÇ¨Ïö©
                
                price_data[strategy_name] = strategy_prices
            
            # Ìè¨ÏßÄÏÖò Îß§ÎãàÏ†Ä ÏóÖÎç∞Ïù¥Ìä∏
            self.position_manager.update_current_prices(price_data)
            
        except Exception as e:
            logger.error(f"Ìè¨ÏßÄÏÖò ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {e}")
            self.error_monitor.record_strategy_error('position_update', e)
    
    async def emergency_sell_all(self, reason: str):
        """ÏùëÍ∏â Ï†ÑÎüâ Îß§ÎèÑ"""
        logger.critical(f"üö® ÏùëÍ∏â Ï†ÑÎüâ Îß§ÎèÑ Ïã§Ìñâ: {reason}")
        
        try:
            self.emergency_mode = True
            
            # Î™®Îì† Ìè¨ÏßÄÏÖò Îß§ÎèÑ ÏãúÎèÑ
            for key, position in self.position_manager.positions.items():
                try:
                    # Ï†ÑÎûµÎ≥Ñ Îß§ÎèÑ Î°úÏßÅ
                    success = await self._emergency_sell_position(position)
                    if success:
                        logger.info(f"üö® ÏùëÍ∏â Îß§ÎèÑ ÏôÑÎ£å: {position.symbol}")
                    else:
                        logger.error(f"üö® ÏùëÍ∏â Îß§ÎèÑ Ïã§Ìå®: {position.symbol}")
                        
                except Exception as e:
                    logger.error(f"ÏùëÍ∏â Îß§ÎèÑ Ïã§Ìå® {position.symbol}: {e}")
                    continue
            
            # Í∏¥Í∏â ÏïåÎ¶º
            await self.notification_manager.send_critical_alert(
                "üö® ÏùëÍ∏â Ï†ÑÎüâ Îß§ÎèÑ Ïã§Ìñâ",
                f"ÏÇ¨Ïú†: {reason}\n"
                f"ÏãúÍ∞Ñ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"Îß§ÎèÑ ÏãúÎèÑ Ìè¨ÏßÄÏÖò: {len(self.position_manager.positions)}Í∞ú"
            )
            
        except Exception as e:
            logger.error(f"ÏùëÍ∏â Îß§ÎèÑ Ïã§Ìñâ Ïã§Ìå®: {e}")
    
    async def _emergency_sell_position(self, position: UnifiedPosition) -> bool:
        """Í∞úÎ≥Ñ Ìè¨ÏßÄÏÖò ÏùëÍ∏â Îß§ÎèÑ"""
        try:
            # Ï†ÑÎûµÎ≥ÑÎ°ú Îß§ÎèÑ Î∞©Î≤ïÏù¥ Îã§Î¶Ñ
            if position.strategy in self.strategies:
                strategy = self.strategies[position.strategy]
                
                # Í∞Å Ï†ÑÎûµÏùò Îß§ÎèÑ Î©îÏÜåÎìú Ìò∏Ï∂ú
                # Ïã§Ï†ú Íµ¨ÌòÑÏãúÏóêÎäî Í∞Å Ï†ÑÎûµÏùò API ÏÇ¨Ïö©
                
                # Ìè¨ÏßÄÏÖò Ï†úÍ±∞
                self.position_manager.remove_position(position.strategy, position.symbol)
                
                # Í±∞Îûò Í∏∞Î°ù
                self.data_manager.save_trade(
                    position.strategy, position.symbol, 'EMERGENCY_SELL',
                    position.quantity, position.current_price, position.currency,
                    position.krw_value, 0.0, position.unrealized_pnl
                )
                
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"Í∞úÎ≥Ñ ÏùëÍ∏â Îß§ÎèÑ Ïã§Ìå®: {e}")
            return False
    
    async def _generate_daily_report(self):
        """ÏùºÏùº Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        try:
            portfolio_summary = self.position_manager.get_portfolio_summary()
            network_status = self.network_monitor.get_network_status()
            error_summary = self.error_monitor.get_error_summary()
            
            report = f"""
üìä ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ ÏùºÏùº Î¶¨Ìè¨Ìä∏
========================
üìÖ ÎÇ†Ïßú: {datetime.now().strftime('%Y-%m-%d')}

üíº Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌòÑÌô©:
‚Ä¢ Ï¥ù Ìè¨ÏßÄÏÖò: {portfolio_summary.get('total_positions', 0)}Í∞ú
‚Ä¢ Ï¥ù Í∞ÄÏπò: {portfolio_summary.get('total_krw_value', 0):,.0f}Ïõê
‚Ä¢ ÎØ∏Ïã§ÌòÑ ÏÜêÏùµ: {portfolio_summary.get('total_unrealized_pnl', 0):+,.0f}Ïõê
‚Ä¢ Ï¥ù ÏàòÏùµÎ•†: {portfolio_summary.get('total_return_pct', 0):+.2f}%

üéØ Ï†ÑÎûµÎ≥Ñ ÌòÑÌô©:
"""
            
            for strategy, data in portfolio_summary.get('by_strategy', {}).items():
                report += f"‚Ä¢ {strategy}: {data['count']}Í∞ú Ìè¨ÏßÄÏÖò, {data['krw_value']:,.0f}Ïõê ({data['unrealized_pnl']:+,.0f}Ïõê)\n"
            
            report += f"""
üåê ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú:
‚Ä¢ Ïó∞Í≤∞ ÏÉÅÌÉú: {'‚úÖ Ï†ïÏÉÅ' if network_status['is_connected'] else '‚ùå ÎÅäÍπÄ'}
‚Ä¢ ÏßÄÏó∞ÏãúÍ∞Ñ: {network_status['latency_ms']:.1f}ms
‚Ä¢ Í∞ÄÎèôÎ•†: {network_status['uptime_percentage']:.1f}%

üö® Ïò§Î•ò Î™®ÎãàÌÑ∞ÎßÅ:
‚Ä¢ ÏùëÍ∏âÎß§ÎèÑ ÏãúÏä§ÌÖú: {'‚úÖ ÌôúÏÑ±Ìôî' if error_summary['emergency_enabled'] else '‚ùå ÎπÑÌôúÏÑ±Ìôî'}
‚Ä¢ Ïò§Î•ò Î∞úÏÉù Ï†ÑÎûµ: {error_summary['total_strategies_with_errors']}Í∞ú
"""
            
            if error_summary.get('error_counts'):
                for strategy, count in error_summary['error_counts'].items():
                    report += f"  - {strategy}: {count}Ìöå Ïò§Î•ò\n"
            
            report += f"""
üèÜ ÏÉÅÏúÑ ÏàòÏùµ Ï¢ÖÎ™©:
"""
            
            for gainer in portfolio_summary.get('top_gainers', [])[:3]:
                report += f"‚Ä¢ {gainer['symbol']} ({gainer['strategy']}): {gainer['pnl_pct']:+.1f}%\n"
            
            report += "\nüí° ÌïòÏúÑ ÏàòÏùµ Ï¢ÖÎ™©:\n"
            for loser in portfolio_summary.get('top_losers', [])[:3]:
                report += f"‚Ä¢ {loser['symbol']} ({loser['strategy']}): {loser['pnl_pct']:+.1f}%\n"
            
            # Î¶¨Ìè¨Ìä∏ Ï†ÑÏÜ°
            await self.notification_manager.send_alert("üìä ÏùºÏùº Î¶¨Ìè¨Ìä∏", report)
            
        except Exception as e:
            logger.error(f"ÏùºÏùº Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            self.error_monitor.record_strategy_error('daily_report', e)
    
    async def shutdown(self):
        """ÏãúÏä§ÌÖú Ï¢ÖÎ£å"""
        logger.info("üõë ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ ÌÜµÌï© ÏãúÏä§ÌÖú Ï¢ÖÎ£å")
        
        try:
            self.is_running = False
            
            # ÎÑ§Ìä∏ÏõåÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏßÄ
            self.network_monitor.stop_monitoring()
            
            # ÏµúÏ¢Ö Î∞±ÏóÖ
            self.data_manager.backup_database()
            
            # Ï¢ÖÎ£å ÏïåÎ¶º
            await self.notification_manager.send_alert(
                "üõë ÏãúÏä§ÌÖú Ï¢ÖÎ£å",
                f"ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ ÌÜµÌï© ÏãúÏä§ÌÖúÏù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.\n"
                f"Ï¢ÖÎ£å ÏãúÍ∞Ñ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"ÏµúÏ¢Ö Ìè¨ÏßÄÏÖò: {len(self.position_manager.positions)}Í∞ú"
            )
            
        except Exception as e:
            logger.error(f"ÏãúÏä§ÌÖú Ï¢ÖÎ£å Ïò§Î•ò: {e}")
    
    def get_system_status(self) -> Dict:
        """ÏãúÏä§ÌÖú ÏÉÅÌÉú Ï°∞Ìöå"""
        try:
            portfolio_summary = self.position_manager.get_portfolio_summary()
            network_status = self.network_monitor.get_network_status()
            
            return {
                'system': {
                    'is_running': self.is_running,
                    'emergency_mode': self.emergency_mode,
                    'last_health_check': self.last_health_check.isoformat(),
                    'uptime': (datetime.now() - self.last_health_check).seconds
                },
                'strategies': {
                    'active_strategies': list(self.strategies.keys()),
                    'total_strategies': len(self.strategies)
                },
                'portfolio': portfolio_summary,
                'network': network_status,
                'currency': {
                    'last_update': self.currency_exchange.last_update.isoformat() if self.currency_exchange.last_update else None,
                    'rates': {k: v.exchange_rate for k, v in self.currency_exchange.exchange_rates.items()}
                },
                'error_monitor': self.error_monitor.get_error_summary()
            }
            
        except Exception as e:
            logger.error(f"ÏãúÏä§ÌÖú ÏÉÅÌÉú Ï°∞Ìöå Ïã§Ìå®: {e}")
            return {'error': str(e)}

# ============================================================================
# üéÆ CLI Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
# ============================================================================

class QuintCLI:
    """ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ CLI Ïù∏ÌÑ∞ÌéòÏù¥Ïä§"""
    
    def __init__(self):
        self.core = None
    
    def print_banner(self):
        """Î∞∞ÎÑà Ï∂úÎ†•"""
        banner = """
üèÜ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüèÜ
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      
  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó     
  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù     
  ‚ñà‚ñà‚ïë‚ñÑ‚ñÑ ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó     
  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë      ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë     
   ‚ïö‚ïê‚ïê‚ñÄ‚ñÄ‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù       ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù     
                                                                           
        ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ ÌÜµÌï© ÏΩîÏñ¥ ÏãúÏä§ÌÖú v1.1.0 (ÏùëÍ∏â Ïò§Î•ò Í∞êÏßÄ)                        
        üá∫üá∏ ÎØ∏Íµ≠Ï£ºÏãù + üáØüáµ ÏùºÎ≥∏Ï£ºÏãù + üáÆüá≥ Ïù∏ÎèÑÏ£ºÏãù + üí∞ ÏïîÌò∏ÌôîÌèê           
üèÜ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüèÜ
        """
        print(banner)
    
    async def start_interactive_mode(self):
        """ÎåÄÌôîÌòï Î™®Îìú ÏãúÏûë"""
        self.print_banner()
        
        while True:
            try:
                print("\n" + "="*60)
                print("üéÆ ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ ÌÜµÌï© Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú")
                print("="*60)
                
                if self.core is None:
                    print("1. üöÄ ÏãúÏä§ÌÖú ÏãúÏûë")
                    print("2. ‚öôÔ∏è  ÏÑ§Ï†ï ÌôïÏù∏")
                    print("3. üìä ÏãúÏä§ÌÖú ÏÉÅÌÉú (ÏùΩÍ∏∞ Ï†ÑÏö©)")
                    print("0. üö™ Ï¢ÖÎ£å")
                else:
                    print("1. üìä Ïã§ÏãúÍ∞Ñ ÏÉÅÌÉú")
                    print("2. üíº Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌòÑÌô©")
                    print("3. üåê ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú")
                    print("4. üí± ÌôòÏú® Ï†ïÎ≥¥")
                    print("5. üéØ Ï†ÑÎûµ Í¥ÄÎ¶¨")
                    print("6. üìà ÏÑ±Í≥º Î¶¨Ìè¨Ìä∏")
                    print("7. üö® ÏùëÍ∏â Îß§ÎèÑ")
                    print("8. üõë ÏãúÏä§ÌÖú Ï¢ÖÎ£å")
                    print("9. üîç Ïò§Î•ò ÌòÑÌô©")  # NEW!
                    print("0. üö™ ÌîÑÎ°úÍ∑∏Îû® Ï¢ÖÎ£å")
                
                choice = input("\nÏÑ†ÌÉùÌïòÏÑ∏Ïöî: ").strip()
                
                if self.core is None:
                    await self._handle_startup_menu(choice)
                else:
                    await self._handle_running_menu(choice)
                    
            except KeyboardInterrupt:
                print("\nüëã ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§.")
                break
            except Exception as e:
                print(f"‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
                await asyncio.sleep(2)
    
    async def _handle_startup_menu(self, choice: str):
        """ÏãúÏûë Î©îÎâ¥ Ï≤òÎ¶¨"""
        if choice == '1':
            print("üöÄ ÏãúÏä§ÌÖúÏùÑ ÏãúÏûëÌï©ÎãàÎã§...")
            self.core = QuintProjectCore()
            
            # Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏãúÏûë
            asyncio.create_task(self.core.start())
            await asyncio.sleep(3)  # ÏãúÏûë ÎåÄÍ∏∞
            
        elif choice == '2':
            self._show_config()
            
        elif choice == '3':
            await self._show_readonly_status()
            
        elif choice == '0':
            exit(0)
    
    async def _handle_running_menu(self, choice: str):
        """Ïã§Ìñâ Ï§ë Î©îÎâ¥ Ï≤òÎ¶¨"""
        if choice == '1':
            await self._show_realtime_status()
            
        elif choice == '2':
            await self._show_portfolio()
            
        elif choice == '3':
            await self._show_network_status()
            
        elif choice == '4':
            await self._show_currency_rates()
            
        elif choice == '5':
            await self._manage_strategies()
            
        elif choice == '6':
            await self._show_performance_report()
            
        elif choice == '7':
            await self._emergency_sell()
            
        elif choice == '8':
            await self._shutdown_system()
            
        elif choice == '9':
            await self._show_error_status()  # NEW!
            
        elif choice == '0':
            await self._shutdown_system()
            exit(0)
    
    def _show_config(self):
        """ÏÑ§Ï†ï Ï†ïÎ≥¥ ÌëúÏãú"""
        print("\n‚öôÔ∏è ÏãúÏä§ÌÖú ÏÑ§Ï†ï Ï†ïÎ≥¥")
        print("="*40)
        
        config_file = "settings.yaml"
        if Path(config_file).exists():
            print(f"‚úÖ ÏÑ§Ï†ï ÌååÏùº: {config_file}")
        else:
            print(f"‚ùå ÏÑ§Ï†ï ÌååÏùº ÏóÜÏùå: {config_file}")
        
        # ÌôòÍ≤ΩÎ≥ÄÏàò Ï≤¥ÌÅ¨
        env_vars = [
            'TELEGRAM_BOT_TOKEN', 'UPBIT_ACCESS_KEY', 'IBKR_HOST',
            'EXCHANGE_RATE_API_KEY', 'EMERGENCY_SELL_ON_ERROR'
        ]
        
        print("\nüîë Ï£ºÏöî ÌôòÍ≤ΩÎ≥ÄÏàò:")
        for var in env_vars:
            value = os.getenv(var, '')
            status = "‚úÖ" if value else "‚ùå"
            if var == 'EMERGENCY_SELL_ON_ERROR':
                masked_value = value
            else:
                masked_value = f"{value[:4]}***" if len(value) > 4 else "ÏóÜÏùå"
            print(f"  {status} {var}: {masked_value}")
        
        input("\nÍ≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")
    
    async def _show_readonly_status(self):
        """ÏùΩÍ∏∞ Ï†ÑÏö© ÏÉÅÌÉú ÌëúÏãú"""
        print("\nüìä ÏãúÏä§ÌÖú ÏÉÅÌÉú (ÏùΩÍ∏∞ Ï†ÑÏö©)")
        print("="*40)
        
        # ÌååÏùº ÏãúÏä§ÌÖú Ï≤¥ÌÅ¨
        files_to_check = [
            "./data/quint_core.db",
            "./logs/quint_core.log",
            "./backups/",
            "settings.yaml"
        ]
        
        print("üìÅ ÌååÏùº ÏãúÏä§ÌÖú:")
        for file_path in files_to_check:
            path = Path(file_path)
            if path.exists():
                if path.is_file():
                    size = path.stat().st_size
                    print(f"  ‚úÖ {file_path} ({size:,} bytes)")
                else:
                    print(f"  ‚úÖ {file_path} (ÎîîÎ†âÌÜ†Î¶¨)")
            else:
                print(f"  ‚ùå {file_path} (ÏóÜÏùå)")
        
        # Î™®Îìà Í∞ÄÏö©ÏÑ±
        print(f"\nüîå Î™®Îìà Í∞ÄÏö©ÏÑ±:")
        print(f"  {'‚úÖ' if US_AVAILABLE else '‚ùå'} ÎØ∏Íµ≠ Ï£ºÏãù Ï†ÑÎûµ")
        print(f"  {'‚úÖ' if JP_AVAILABLE else '‚ùå'} ÏùºÎ≥∏ Ï£ºÏãù Ï†ÑÎûµ") 
        print(f"  {'‚úÖ' if IN_AVAILABLE else '‚ùå'} Ïù∏ÎèÑ Ï£ºÏãù Ï†ÑÎûµ")
        print(f"  {'‚úÖ' if CRYPTO_AVAILABLE else '‚ùå'} ÏïîÌò∏ÌôîÌèê Ï†ÑÎûµ")
        print(f"  {'‚úÖ' if IBKR_AVAILABLE else '‚ùå'} IBKR API")
        print(f"  {'‚úÖ' if UPBIT_AVAILABLE else '‚ùå'} Upbit API")
        
        # ÏùëÍ∏âÎß§ÎèÑ ÏÑ§Ï†ï
        print(f"\nüö® ÏùëÍ∏âÎß§ÎèÑ ÏÑ§Ï†ï:")
        print(f"  ÏãúÏä§ÌÖú: {'‚úÖ ÌôúÏÑ±Ìôî' if EMERGENCY_SELL_ON_ERROR else '‚ùå ÎπÑÌôúÏÑ±Ìôî'}")
        print(f"  Î©îÎ™®Î¶¨ ÏûÑÍ≥ÑÏπò: {EMERGENCY_MEMORY_THRESHOLD}%")
        print(f"  CPU ÏûÑÍ≥ÑÏπò: {EMERGENCY_CPU_THRESHOLD}%")
        print(f"  ÎîîÏä§ÌÅ¨ ÏûÑÍ≥ÑÏπò: {EMERGENCY_DISK_THRESHOLD}GB")
        print(f"  Ïò§Î•ò ÏûÑÍ≥ÑÏπò: {EMERGENCY_ERROR_COUNT}Ìöå")
        
        input("\nÍ≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")
    
    async def _show_realtime_status(self):
        """Ïã§ÏãúÍ∞Ñ ÏÉÅÌÉú ÌëúÏãú"""
        if not self.core:
            print("‚ùå ÏãúÏä§ÌÖúÏù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            return
        
        print("\nüìä Ïã§ÏãúÍ∞Ñ ÏãúÏä§ÌÖú ÏÉÅÌÉú")
        print("="*50)
        
        try:
            status = self.core.get_system_status()
            
            # ÏãúÏä§ÌÖú Ï†ïÎ≥¥
            sys_info = status.get('system', {})
            print(f"üîÑ Ïã§Ìñâ ÏÉÅÌÉú: {'‚úÖ Ïã§Ìñâ Ï§ë' if sys_info.get('is_running') else '‚ùå Ï§ëÏßÄ'}")
            print(f"üö® ÏùëÍ∏â Î™®Îìú: {'‚ö†Ô∏è ÌôúÏÑ±Ìôî' if sys_info.get('emergency_mode') else '‚úÖ ÎπÑÌôúÏÑ±Ìôî'}")
            print(f"‚è∞ ÎßàÏßÄÎßâ Ï≤¥ÌÅ¨: {sys_info.get('last_health_check', 'N/A')}")
            
            # Ï†ÑÎûµ Ï†ïÎ≥¥
            strategies = status.get('strategies', {})
            print(f"\nüéØ ÌôúÏÑ± Ï†ÑÎûµ: {', '.join(strategies.get('active_strategies', []))}")
            
            # Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏöîÏïΩ
            portfolio = status.get('portfolio', {})
            print(f"\nüíº Ìè¨Ìä∏Ìè¥Î¶¨Ïò§:")
            print(f"  Ï¥ù Ìè¨ÏßÄÏÖò: {portfolio.get('total_positions', 0)}Í∞ú")
            print(f"  Ï¥ù Í∞ÄÏπò: {portfolio.get('total_krw_value', 0):,.0f}Ïõê")
            print(f"  ÎØ∏Ïã§ÌòÑ ÏÜêÏùµ: {portfolio.get('total_unrealized_pnl', 0):+,.0f}Ïõê")
            
            # ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú
            network = status.get('network', {})
            print(f"\nüåê ÎÑ§Ìä∏ÏõåÌÅ¨:")
            print(f"  Ïó∞Í≤∞: {'‚úÖ' if network.get('is_connected') else '‚ùå'}")
            print(f"  ÏßÄÏó∞ÏãúÍ∞Ñ: {network.get('latency_ms', 0):.1f}ms")
            print(f"  Í∞ÄÎèôÎ•†: {network.get('uptime_percentage', 0):.1f}%")
            
            # Ïò§Î•ò Î™®ÎãàÌÑ∞ ÏÉÅÌÉú
            error_info = status.get('error_monitor', {})
            print(f"\nüö® Ïò§Î•ò Î™®ÎãàÌÑ∞:")
            print(f"  ÏùëÍ∏âÎß§ÎèÑ: {'‚úÖ ÌôúÏÑ±Ìôî' if error_info.get('emergency_enabled') else '‚ùå ÎπÑÌôúÏÑ±Ìôî'}")
            print(f"  Ïò§Î•ò Ï†ÑÎûµ: {error_info.get('total_strategies_with_errors', 0)}Í∞ú")
            if error_info.get('error_counts'):
                for strategy, count in error_info['error_counts'].items():
                    print(f"    {strategy}: {count}Ìöå")
            
        except Exception as e:
            print(f"‚ùå ÏÉÅÌÉú Ï°∞Ìöå Ïã§Ìå®: {e}")
        
        input("\nÍ≥ÑÏÜçÌïòÎ†§Î©¥ EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...")
    
    async def _show_error_status(self):
        """Ïò§Î•ò ÌòÑÌô© ÏÉÅÏÑ∏ ÌëúÏãú (NEW!)"""
        if not self.core:
            print("‚ùå ÏãúÏä§ÌÖúÏù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            return
        
        print("\nüîç Ïò§Î•ò ÌòÑÌô© ÏÉÅÏÑ∏")
        print("="*40)
        
        try:
            error_summary = self.core.error_monitor.get_error_summary()
            
            print(f"üö® ÏùëÍ∏âÎß§ÎèÑ ÏãúÏä§ÌÖú: {'‚úÖ ÌôúÏÑ±Ìôî' if error_summary['emergency_enabled'] else '‚ùå ÎπÑÌôúÏÑ±Ìôî'}")
            print(f"üìä Ïò§Î•ò Î∞úÏÉù Ï†ÑÎûµ
        self.cpu_high_start = None
        self.memory_warnings = 0
        
        # Ïã†Ìò∏ Ìï∏Îì§Îü¨ Îì±Î°ù
        self._setup_signal_handlers()
    
    def _setup_signal_handlers(self):
        """ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å Ïã†Ìò∏ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï"""
        try:
            signal.signal(signal.SIGTERM, self._handle_termination_signal)
            signal.signal(signal.SIGINT, self._handle_termination_signal)
            if hasattr(signal, 'SIGHUP'):  # Unix/Linux only
                signal.signal(signal.SIGHUP, self._handle_termination_signal)
        except Exception as e:
            logger.debug(f"Ïã†Ìò∏ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï Ïã§Ìå®: {e}")
    
    def _handle_termination_signal(self, signum, frame):
        """Ï¢ÖÎ£å Ïã†Ìò∏ Ï≤òÎ¶¨"""
        logger.critical(f"üö® Ï¢ÖÎ£å Ïã†Ìò∏ Í∞êÏßÄ: {signum}")
        if EMERGENCY_SELL_ON_ERROR:
            asyncio.create_task(self._emergency_sell_on_signal(signum))
    
    async def _emergency_sell_on_signal(self, signum):
        """Ïã†Ìò∏ Í∏∞Î∞ò ÏùëÍ∏â Îß§ÎèÑ"""
        try:
            await self.core_system.emergency_sell_all(f"TERMINATION_SIGNAL_{signum}")
        except Exception as e:
            logger.error(f"Ïã†Ìò∏ Í∏∞Î∞ò ÏùëÍ∏â Îß§ÎèÑ Ïã§Ìå®: {e}")
    
    async def check_system_resources(self):
        """ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ Ï≤¥ÌÅ¨"""
        if not EMERGENCY_SELL_ON_ERROR:
            return
        
        try:
            # Î©îÎ™®Î¶¨ Ï≤¥ÌÅ¨
            memory_usage = psutil.virtual_memory().percent
            if memory_usage >= EMERGENCY_MEMORY_THRESHOLD:
                self.memory_warnings += 1
                if self.memory_warnings >= 3:  # 3Ìöå Ïó∞ÏÜç Í≤ΩÍ≥†
                    await self._handle_resource_emergency("MEMORY_CRITICAL", 
                                                         f"Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ: {memory_usage:.1f}%")
            else:
                self.memory_warnings = 0
            
            # CPU Ï≤¥ÌÅ¨
            cpu_usage = psutil.cpu_percent(interval=1)
            if cpu_usage >= EMERGENCY_CPU_THRESHOLD:
                if self.cpu_high_start is None:
                    self.cpu_high_start = time.time()
                elif time.time() - self.cpu_high_start > 300:  # 5Î∂Ñ Ïó∞ÏÜç
                    await self._handle_resource_emergency("CPU_CRITICAL", 
                                                         f"CPU ÏÇ¨Ïö©Îüâ: {cpu_usage:.1f}% (5Î∂Ñ Ïó∞ÏÜç)")
            else:
                self.cpu_high_start = None
            
            # ÎîîÏä§ÌÅ¨ Ï≤¥ÌÅ¨
            disk_free = psutil.disk_usage('/').free / (1024**3)  # GB
            if disk_free <= EMERGENCY_DISK_THRESHOLD:
                await self._handle_resource_emergency("DISK_CRITICAL", 
                                                     f"ÎîîÏä§ÌÅ¨ Ïó¨Ïú†Í≥µÍ∞Ñ: {disk_free:.1f}GB")
            
        except Exception as e:
            logger.error(f"ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ Ï≤¥ÌÅ¨ Ïã§Ìå®: {e}")
    
    async def _handle_resource_emergency(self, reason: str, details: str):
        """Î¶¨ÏÜåÏä§ Î∂ÄÏ°± ÏùëÍ∏â ÏÉÅÌô© Ï≤òÎ¶¨"""
        if self._should_skip_emergency():
            return
        
        logger.critical(f"üö® ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ ÏúÑÌóò: {reason} - {details}")
        
        # Ïú†Ïòà ÏãúÍ∞Ñ ÌõÑ ÏùëÍ∏â Îß§ÎèÑ
        await asyncio.sleep(EMERGENCY_GRACE_PERIOD)
        await self.core_system.emergency_sell_all(f"{reason}: {details}")
        
        self.last_emergency_time = datetime.now()
    
    def record_strategy_error(self, strategy: str, error: Exception):
        """Ï†ÑÎûµ Ïò§Î•ò Í∏∞Î°ù"""
        if strategy not in self.error_counts:
            self.error_counts[strategy] = {'count': 0, 'last_error_time': None, 'errors': []}
        
        self.error_counts[strategy]['count'] += 1
        self.error_counts[strategy]['last_error_time'] = datetime.now()
        self.error_counts[strategy]['errors'].append({
            'error': str(error),
            'timestamp': datetime.now().isoformat()
        })
        
        # ÏµúÍ∑º Ïò§Î•òÎßå Ïú†ÏßÄ (Î©îÎ™®Î¶¨ Ï†àÏïΩ)
        if len(self.error_counts[strategy]['errors']) > 10:
            self.error_counts[strategy]['errors'] = self.error_counts[strategy]['errors'][-10:]
        
        # Ïó∞ÏÜç Ïò§Î•ò Ï≤¥ÌÅ¨
        if self.error_counts[strategy]['count'] >= EMERGENCY_ERROR_COUNT:
            asyncio.create_task(self._handle_strategy_emergency(strategy))
    
    async def _handle_strategy_emergency(self, strategy: str):
        """Ï†ÑÎûµ Ïò§Î•ò ÏùëÍ∏â ÏÉÅÌô© Ï≤òÎ¶¨"""
        if not EMERGENCY_SELL_ON_ERROR or self._should_skip_emergency():
            return
        
        error_info = self.error_counts[strategy]
        logger.critical(f"üö® Ï†ÑÎûµ Ïò§Î•ò ÏûÑÍ≥ÑÏπò Ï¥àÍ≥º: {strategy} ({error_info['count']}Ìöå)")
        
        # Ìï¥Îãπ Ï†ÑÎûµ Ìè¨ÏßÄÏÖòÎßå ÏùëÍ∏â Îß§ÎèÑ
        await self._emergency_sell_strategy_positions(strategy)
        
        # Ïò§Î•ò Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã
        self.error_counts[strategy] = {'count': 0, 'last_error_time': None, 'errors': []}
        self.last_emergency_time = datetime.now()
    
    async def _emergency_sell_strategy_positions(self, strategy: str):
        """ÌäπÏ†ï Ï†ÑÎûµ Ìè¨ÏßÄÏÖò ÏùëÍ∏â Îß§ÎèÑ"""
        try:
            positions_to_sell = [
                pos for pos in self.core_system.position_manager.positions.values()
                if pos.strategy == strategy
            ]
            
            if not positions_to_sell:
                logger.info(f"üìù {strategy} Ï†ÑÎûµÏóê Îß§ÎèÑÌï† Ìè¨ÏßÄÏÖò ÏóÜÏùå")
                return
            
            for position in positions_to_sell:
                try:
                    success = await self.core_system._emergency_sell_position(position)
                    if success:
                        logger.info(f"üö® {strategy} ÏùëÍ∏â Îß§ÎèÑ ÏôÑÎ£å: {position.symbol}")
                except Exception as e:
                    logger.error(f"üö® {strategy} ÏùëÍ∏â Îß§ÎèÑ Ïã§Ìå® {position.symbol}: {e}")
            
            # ÏïåÎ¶º Ï†ÑÏÜ°
            await self.core_system.notification_manager.send_critical_alert(
                f"üö® {strategy} Ï†ÑÎûµ ÏùëÍ∏â Îß§ÎèÑ",
                f"Ï†ÑÎûµ: {strategy}\n"
                f"Îß§ÎèÑ Ìè¨ÏßÄÏÖò: {len(positions_to_sell)}Í∞ú\n"
                f"ÏÇ¨Ïú†: Ïó∞ÏÜç Ïò§Î•ò {EMERGENCY_ERROR_COUNT}Ìöå Ï¥àÍ≥º"
            )
            
        except Exception as e:
            logger.error(f"Ï†ÑÎûµÎ≥Ñ ÏùëÍ∏â Îß§ÎèÑ Ïã§Ìå®: {e}")
    
    def _should_skip_emergency(self) -> bool:
        """ÏùëÍ∏â Îß§ÎèÑ Ïä§ÌÇµ Ïó¨Î∂Ä (Ï§ëÎ≥µ Î∞©ÏßÄ)"""
        if self.last_emergency_time is None:
            return False
        
        # 10Î∂Ñ ÎÇ¥ Ï§ëÎ≥µ ÏùëÍ∏â Îß§ÎèÑ Î∞©ÏßÄ
        return (datetime.now() - self.last_emergency_time).seconds < 600
    
    def reset_error_counts(self, strategy: str = None):
        """Ïò§Î•ò Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã"""
        if strategy:
            if strategy in self.error_counts:
                self.error_counts[strategy] = {'count': 0, 'last_error_time': None, 'errors': []}
        else:
            self.error_counts = {}
    
    def get_error_summary(self) -> Dict:
        """Ïò§Î•ò ÌòÑÌô© ÏöîÏïΩ"""
        return {
            'total_strategies_with_errors': len(self.error_counts),
            'error_counts': {k: v['count'] for k, v in self.error_counts.items()},
            'last_emergency_time': self.last_emergency_time.isoformat() if self.last_emergency_time else None,
            'emergency_enabled': EMERGENCY_SELL_ON_ERROR
        }

# ============================================================================
# üìä Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§ Ï†ïÏùò
# ============================================================================

@dataclass
class Currency:
    """ÌÜµÌôî Ï†ïÎ≥¥"""
    code: str
    name: str
    symbol: str
    exchange_rate: float
    last_updated: datetime

@dataclass
class UnifiedPosition:
    """ÌÜµÌï© Ìè¨ÏßÄÏÖò"""
    strategy: str  # us, jp, in, crypto
    symbol: str
    quantity: float
    avg_price: float
    current_price: float
    currency: str
    krw_value: float
    unrealized_pnl: float
    unrealized_pnl_pct: float
    entry_date: datetime
    last_updated: datetime

@dataclass
class StrategyPerformance:
    """Ï†ÑÎûµÎ≥Ñ ÏÑ±Í≥º"""
    strategy: str
    total_investment: float
    current_value: float
    unrealized_pnl: float
    realized_pnl: float
    total_return_pct: float
    win_rate: float
    trades_count: int
    avg_holding_days: float
    last_updated: datetime

@dataclass
class NetworkStatus:
    """ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú"""
    is_connected: bool
    latency: float
    last_check: datetime
    consecutive_failures: int
    uptime_percentage: float

# ============================================================================
# üí± ÏûêÎèô ÌôòÏ†Ñ ÏãúÏä§ÌÖú
# ============================================================================

class AutoCurrencyExchange:
    """ÏûêÎèô ÌôòÏ†Ñ ÏãúÏä§ÌÖú"""
    
    def __init__(self):
        self.exchange_rates = {}
        self.last_update = None
        self.update_interval = 300  # 5Î∂ÑÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
        self.api_key = os.getenv('EXCHANGE_RATE_API_KEY', '')
        
    async def update_exchange_rates(self) -> bool:
        """ÌôòÏú® Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏"""
        try:
            # Ïó¨Îü¨ API ÏÜåÏä§ ÏÇ¨Ïö© (Î¨¥Î£å + Ïú†Î£å)
            rates = await self._fetch_from_multiple_sources()
            
            if rates:
                self.exchange_rates = {
                    'USD': Currency('USD', 'ÎØ∏Íµ≠ Îã¨Îü¨', '$', rates.get('USD', 1300), datetime.now()),
                    'JPY': Currency('JPY', 'ÏùºÎ≥∏ Ïóî', '¬•', rates.get('JPY', 10), datetime.now()),
                    'INR': Currency('INR', 'Ïù∏ÎèÑ Î£®Ìîº', '‚Çπ', rates.get('INR', 16), datetime.now()),
                    'KRW': Currency('KRW', 'ÌïúÍµ≠ Ïõê', '‚Ç©', 1.0, datetime.now())
                }
                self.last_update = datetime.now()
                logger.info(f"üí± ÌôòÏú® ÏóÖÎç∞Ïù¥Ìä∏: USD={rates.get('USD'):.0f}, JPY={rates.get('JPY'):.1f}, INR={rates.get('INR'):.1f}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"ÌôòÏú® ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {e}")
            return False
    
    async def _fetch_from_multiple_sources(self) -> Dict[str, float]:
        """Îã§Ï§ë ÏÜåÏä§ÏóêÏÑú ÌôòÏú® Ï†ïÎ≥¥ ÏàòÏßë"""
        rates = {}
        
        # 1. ÌïúÍµ≠ÏùÄÌñâ API (Í∏∞Î≥∏)
        try:
            bok_rates = await self._fetch_from_bok()
            if bok_rates:
                rates.update(bok_rates)
        except Exception as e:
            logger.debug(f"ÌïúÍµ≠ÏùÄÌñâ API Ïã§Ìå®: {e}")
        
        # 2. ExchangeRate-API (Î∞±ÏóÖ)
        try:
            if not rates and self.api_key:
                er_rates = await self._fetch_from_exchangerate_api()
                if er_rates:
                    rates.update(er_rates)
        except Exception as e:
            logger.debug(f"ExchangeRate-API Ïã§Ìå®: {e}")
        
        # 3. Í≥†Ï†ïÍ∞í (ÏµúÌõÑ ÏàòÎã®)
        if not rates:
            rates = {'USD': 1300, 'JPY': 9.5, 'INR': 16}
            logger.warning("‚ö†Ô∏è Í≥†Ï†ï ÌôòÏú® ÏÇ¨Ïö©")
        
        return rates
    
    async def _fetch_from_bok(self) -> Dict[str, float]:
        """ÌïúÍµ≠ÏùÄÌñâ ÌôòÏú® API"""
        try:
            url = "https://www.bok.or.kr/portal/singl/openapi/exchangeJSON.do"
            params = {
                'lang': 'ko',
                'per': 'day',
                'keytype': 'json'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        rates = {}
                        for item in data:
                            if item['CUR_UNIT'] == 'USD':
                                rates['USD'] = float(item['DEAL_BAS_R'].replace(',', ''))
                            elif item['CUR_UNIT'] == 'JPY(100)':
                                rates['JPY'] = float(item['DEAL_BAS_R'].replace(',', '')) / 100
                            elif item['CUR_UNIT'] == 'INR':
                                rates['INR'] = float(item['DEAL_BAS_R'].replace(',', ''))
                        
                        return rates
        except Exception as e:
            logger.debug(f"ÌïúÍµ≠ÏùÄÌñâ API Ïò§Î•ò: {e}")
        
        return {}
    
    async def _fetch_from_exchangerate_api(self) -> Dict[str, float]:
        """ExchangeRate-API (Ïú†Î£å)"""
        try:
            url = f"https://v6.exchangerate-api.com/v6/{self.api_key}/latest/KRW"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        conversion_rates = data['conversion_rates']
                        
                        return {
                            'USD': 1 / conversion_rates['USD'],
                            'JPY': 1 / conversion_rates['JPY'],
                            'INR': 1 / conversion_rates['INR']
                        }
        except Exception as e:
            logger.debug(f"ExchangeRate-API Ïò§Î•ò: {e}")
        
        return {}
    
    def convert_to_krw(self, amount: float, from_currency: str) -> float:
        """Îã§Î•∏ ÌÜµÌôîÎ•º ÏõêÌôîÎ°ú Î≥ÄÌôò"""
        try:
            if from_currency == 'KRW':
                return amount
            
            if from_currency in self.exchange_rates:
                rate = self.exchange_rates[from_currency].exchange_rate
                return amount * rate
            else:
                logger.warning(f"‚ö†Ô∏è ÌôòÏú® Ï†ïÎ≥¥ ÏóÜÏùå: {from_currency}")
                return amount
        
        except Exception as e:
            logger.error(f"ÌôòÏ†Ñ Ïã§Ìå®: {e}")
            return amount
    
    def convert_from_krw(self, krw_amount: float, to_currency: str) -> float:
        """ÏõêÌôîÎ•º Îã§Î•∏ ÌÜµÌôîÎ°ú Î≥ÄÌôò"""
        try:
            if to_currency == 'KRW':
                return krw_amount
            
            if to_currency in self.exchange_rates:
                rate = self.exchange_rates[to_currency].exchange_rate
                return krw_amount / rate
            else:
                logger.warning(f"‚ö†Ô∏è ÌôòÏú® Ï†ïÎ≥¥ ÏóÜÏùå: {to_currency}")
                return krw_amount
        
        except Exception as e:
            logger.error(f"ÌôòÏ†Ñ Ïã§Ìå®: {e}")
            return krw_amount
    
    def get_exchange_rate(self, currency: str) -> Optional[float]:
        """ÌôòÏú® Ï°∞Ìöå"""
        if currency in self.exchange_rates:
            return self.exchange_rates[currency].exchange_rate
        return None

# ============================================================================
# üåê ÎÑ§Ìä∏ÏõåÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏä§ÌÖú
# ============================================================================

class NetworkMonitor:
    """ÎÑ§Ìä∏ÏõåÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ + ÎÅäÍπÄ Ïãú Ï†ÑÎüâ Îß§ÎèÑ"""
    
    def __init__(self, core_system):
        self.core_system = core_system
        self.is_monitoring = False
        self.status = NetworkStatus(
            is_connected=True,
            latency=0.0,
            last_check=datetime.now(),
            consecutive_failures=0,
            uptime_percentage=100.0
        )
        
        # ÏÑ§Ï†ï
        self.check_interval = int(os.getenv('NETWORK_CHECK_INTERVAL', '30'))  # 30Ï¥à
        self.timeout = int(os.getenv('NETWORK_TIMEOUT', '10'))  # 10Ï¥à
        self.max_failures = int(os.getenv('NETWORK_MAX_FAILURES', '3'))  # 3Ìöå Ïó∞ÏÜç Ïã§Ìå®
        self.grace_period = int(os.getenv('NETWORK_GRACE_PERIOD', '300'))  # 5Î∂Ñ Ïú†Ïòà
        self.emergency_sell = os.getenv('NETWORK_DISCONNECT_SELL_ALL', 'false').lower() == 'true'
        
        # ÌÖåÏä§Ìä∏ ÎåÄÏÉÅ
        self.test_hosts = [
            ('8.8.8.8', 53),      # Google DNS
            ('1.1.1.1', 53),      # Cloudflare DNS
            ('yahoo.com', 80),    # Yahoo Finance
            ('upbit.com', 443)    # Upbit
        ]
        
        # ÌÜµÍ≥Ñ
        self.total_checks = 0
        self.successful_checks = 0
        self.last_disconnect_time = None
        
    async def start_monitoring(self):
        """ÎÑ§Ìä∏ÏõåÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë"""
        self.is_monitoring = True
        logger.info("üåê ÎÑ§Ìä∏ÏõåÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë")
        
        while self.is_monitoring:
            try:
                await self._check_network_status()
                await asyncio.sleep(self.check_interval)
            
            except Exception as e:
                logger.error(f"ÎÑ§Ìä∏ÏõåÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ Ïò§Î•ò: {e}")
                await asyncio.sleep(60)  # 1Î∂Ñ ÌõÑ Ïû¨ÏãúÎèÑ
    
    def stop_monitoring(self):
        """Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏßÄ"""
        self.is_monitoring = False
        logger.info("‚èπÔ∏è ÎÑ§Ìä∏ÏõåÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏßÄ")
    
    async def _check_network_status(self):
        """ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú Ï≤¥ÌÅ¨"""
        start_time = time.time()
        success_count = 0
        
        # Îã§Ï§ë Ìò∏Ïä§Ìä∏ ÌÖåÏä§Ìä∏
        for host, port in self.test_hosts:
            try:
                if await self._test_connection(host, port):
                    success_count += 1
            except:
                continue
        
        # Í≤∞Í≥º Í≥ÑÏÇ∞
        latency = (time.time() - start_time) * 1000  # ms
        is_connected = success_count >= 2  # Ï†àÎ∞ò Ïù¥ÏÉÅ ÏÑ±Í≥µ
        
        self.total_checks += 1
        if is_connected:
            self.successful_checks += 1
            self.status.consecutive_failures = 0
        else:
            self.status.consecutive_failures += 1
        
        # ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        previous_status = self.status.is_connected
        self.status.is_connected = is_connected
        self.status.latency = latency
        self.status.last_check = datetime.now()
        self.status.uptime_percentage = (self.successful_checks / self.total_checks) * 100
        
        # Ïó∞Í≤∞ ÏÉÅÌÉú Î≥ÄÌôî Í∞êÏßÄ
        if previous_status and not is_connected:
            await self._handle_network_disconnect()
        elif not previous_status and is_connected:
            await self._handle_network_reconnect()
        
        # Ïó∞ÏÜç Ïã§Ìå® Ï≤¥ÌÅ¨
        if self.status.consecutive_failures >= self.max_failures:
            await self._handle_critical_network_failure()
    
    async def _test_connection(self, host: str, port: int) -> bool:
        """Í∞úÎ≥Ñ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏"""
        try:
            reader, writer = await asyncio.wait_for(
                asyncio.open_connection(host, port),
                timeout=self.timeout
            )
            writer.close()
            await writer.wait_closed()
            return True
        
        except Exception:
            return False
    
    async def _handle_network_disconnect(self):
        """ÎÑ§Ìä∏ÏõåÌÅ¨ ÎÅäÍπÄ Ï≤òÎ¶¨"""
        self.last_disconnect_time = datetime.now()
        logger.warning("üö® ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ ÎÅäÍπÄ Í∞êÏßÄ!")
        
        # ÏïåÎ¶º Ï†ÑÏÜ°
        await self.core_system.notification_manager.send_critical_alert(
            "üö® ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ ÎÅäÍπÄ",
            f"ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞Ïù¥ ÎÅäÏñ¥Ï°åÏäµÎãàÎã§.\n"
            f"ÏãúÍ∞Ñ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"Ïó∞ÏÜç Ïã§Ìå®: {self.status.consecutive_failures}Ìöå"
        )
    
    async def _handle_network_reconnect(self):
        """ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû¨Ïó∞Í≤∞ Ï≤òÎ¶¨"""
        disconnect_duration = 0
        if self.last_disconnect_time:
            disconnect_duration = (datetime.now() - self.last_disconnect_time).seconds
        
        logger.info(f"‚úÖ ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Î≥µÍµ¨ (ÎÅäÍπÄ ÏãúÍ∞Ñ: {disconnect_duration}Ï¥à)")
        
        # ÏïåÎ¶º Ï†ÑÏÜ°
        await self.core_system.notification_manager.send_alert(
            "‚úÖ ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Î≥µÍµ¨",
            f"ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞Ïù¥ Î≥µÍµ¨ÎêòÏóàÏäµÎãàÎã§.\n"
            f"ÎÅäÍπÄ ÏãúÍ∞Ñ: {disconnect_duration}Ï¥à\n"
            f"ÌòÑÏû¨ ÏßÄÏó∞ÏãúÍ∞Ñ: {self.status.latency:.1f}ms"
        )
    
    async def _handle_critical_network_failure(self):
        """ÏπòÎ™ÖÏ†Å ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû•Ïï† Ï≤òÎ¶¨"""
        if not self.emergency_sell:
            logger.warning("‚ö†Ô∏è ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû•Ïï† Í∞êÏßÄ (ÏùëÍ∏âÎß§ÎèÑ ÎπÑÌôúÏÑ±Ìôî)")
            return
        
        logger.critical("üö® ÏπòÎ™ÖÏ†Å ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû•Ïï† - ÏùëÍ∏â Ï†ÑÎüâ Îß§ÎèÑ Ïã§Ìñâ!")
        
        try:
            # Ïú†Ïòà ÏãúÍ∞Ñ Ï≤¥ÌÅ¨
            if self.last_disconnect_time:
                disconnect_duration = (datetime.now() - self.last_disconnect_time).seconds
                if disconnect_duration < self.grace_period:
                    logger.info(f"‚è≥ Ïú†Ïòà ÏãúÍ∞Ñ ÎåÄÍ∏∞ Ï§ë: {self.grace_period - disconnect_duration}Ï¥à ÎÇ®Ïùå")
                    return
            
            # ÏùëÍ∏â Ï†ÑÎüâ Îß§ÎèÑ Ïã§Ìñâ
            await self.core_system.emergency_sell_all("NETWORK_FAILURE")
            
        except Exception as e:
            logger.error(f"ÏùëÍ∏â Îß§ÎèÑ Ïã§Ìñâ Ïã§Ìå®: {e}")
    
    def get_network_status(self) -> Dict:
        """ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú Ï†ïÎ≥¥ Î∞òÌôò"""
        return {
            'is_connected': self.status.is_connected,
            'latency_ms': self.status.latency,
            'consecutive_failures': self.status.consecutive_failures,
            'uptime_percentage': self.status.uptime_percentage,
            'last_check': self.status.last_check.isoformat(),
            'total_checks': self.total_checks,
            'emergency_sell_enabled': self.emergency_sell
        }

# ============================================================================
# üì± ÌÜµÌï© ÏïåÎ¶º ÏãúÏä§ÌÖú
# ============================================================================

class NotificationManager:
    """ÌÜµÌï© ÏïåÎ¶º Í¥ÄÎ¶¨Ïûê"""
    
    def __init__(self):
        # ÌÖîÎ†àÍ∑∏Îû® ÏÑ§Ï†ï
        self.telegram_enabled = os.getenv('TELEGRAM_ENABLED', 'false').lower() == 'true'
        self.telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '')
        self.telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID', '')
        
        # Ïù¥Î©îÏùº ÏÑ§Ï†ï
        self.email_enabled = os.getenv('EMAIL_ENABLED', 'false').lower() == 'true'
        self.email_smtp_server = os.getenv('EMAIL_SMTP_SERVER', 'smtp.gmail.com')
        self.email_smtp_port = int(os.getenv('EMAIL_SMTP_PORT', '587'))
        self.email_username = os.getenv('EMAIL_USERNAME', '')
        self.email_password = os.getenv('EMAIL_PASSWORD', '')
        self.email_to = os.getenv('EMAIL_TO', '')
        
        # ÏïåÎ¶º Î†àÎ≤® ÏÑ§Ï†ï
        self.levels = {
            'trade_execution': True,
            'profit_loss': True,
            'risk_warning': True,
            'network_status': True,
            'daily_summary': True
        }
    
    async def send_alert(self, title: str, message: str, level: str = 'info'):
        """ÏùºÎ∞ò ÏïåÎ¶º Ï†ÑÏÜ°"""
        try:
            formatted_message = f"üèÜ ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏\n\nüìå {title}\n\n{message}\n\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            tasks = []
            
            if self.telegram_enabled:
                tasks.append(self._send_telegram(formatted_message))
            
            if self.email_enabled and level in ['warning', 'critical']:
                tasks.append(self._send_email(title, formatted_message))
            
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)
                
        except Exception as e:
            logger.error(f"ÏïåÎ¶º Ï†ÑÏÜ° Ïã§Ìå®: {e}")
    
    async def send_critical_alert(self, title: str, message: str):
        """Ï§ëÏöî ÏïåÎ¶º Ï†ÑÏÜ° (Î™®Îì† Ï±ÑÎÑê)"""
        try:
            formatted_message = f"üö® Í∏¥Í∏â ÏïåÎ¶º\n\nüìå {title}\n\n{message}\n\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            tasks = []
            
            if self.telegram_enabled:
                tasks.append(self._send_telegram(formatted_message))
            
            if self.email_enabled:
                tasks.append(self._send_email(f"üö® {title}", formatted_message))
            
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)
                
        except Exception as e:
            logger.error(f"Ï§ëÏöî ÏïåÎ¶º Ï†ÑÏÜ° Ïã§Ìå®: {e}")
    
    async def _send_telegram(self, message: str):
        """ÌÖîÎ†àÍ∑∏Îû® Ï†ÑÏÜ°"""
        try:
            if not self.telegram_bot_token or not self.telegram_chat_id:
                return
            
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            data = {
                'chat_id': self.telegram_chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data, timeout=10) as response:
                    if response.status == 200:
                        logger.debug("ÌÖîÎ†àÍ∑∏Îû® ÏïåÎ¶º Ï†ÑÏÜ° ÏôÑÎ£å")
                    else:
                        logger.error(f"ÌÖîÎ†àÍ∑∏Îû® Ï†ÑÏÜ° Ïã§Ìå®: {response.status}")
                        
        except Exception as e:
            logger.error(f"ÌÖîÎ†àÍ∑∏Îû® Ï†ÑÏÜ° Ïò§Î•ò: {e}")
    
    async def _send_email(self, subject: str, message: str):
        """Ïù¥Î©îÏùº Ï†ÑÏÜ°"""
        try:
            if not all([self.email_username, self.email_password, self.email_to]):
                return
            
            msg = MimeMultipart()
            msg['From'] = self.email_username
            msg['To'] = self.email_to
            msg['Subject'] = subject
            
            msg.attach(MimeText(message, 'plain', 'utf-8'))
            
            # ÎπÑÎèôÍ∏∞ Ïù¥Î©îÏùº Ï†ÑÏÜ°
            await asyncio.get_event_loop().run_in_executor(
                None, self._send_email_sync, msg
            )
            
        except Exception as e:
            logger.error(f"Ïù¥Î©îÏùº Ï†ÑÏÜ° Ïò§Î•ò: {e}")
    
    def _send_email_sync(self, msg):
        """ÎèôÍ∏∞ Ïù¥Î©îÏùº Ï†ÑÏÜ°"""
        try:
            server = smtplib.SMTP(self.email_smtp_server, self.email_smtp_port)
            server.starttls()
            server.login(self.email_username, self.email_password)
            server.send_message(msg)
            server.quit()
            logger.debug("Ïù¥Î©îÏùº ÏïåÎ¶º Ï†ÑÏÜ° ÏôÑÎ£å")
            
        except Exception as e:
            logger.error(f"Ïù¥Î©îÏùº Ï†ÑÏÜ° ÎèôÍ∏∞ Ïò§Î•ò: {e}")

# ============================================================================
# üóÉÔ∏è ÌÜµÌï© Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨Ïûê
# ============================================================================

class DataManager:
    """ÌÜµÌï© Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú"""
    
    def __init__(self):
        self.db_path = os.getenv('DATABASE_PATH', './data/quint_core.db')
        self.backup_enabled = os.getenv('BACKUP_ENABLED', 'true').lower() == 'true'
        self.backup_path = os.getenv('BACKUP_PATH', './backups/')
        
        # ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        Path(self.db_path).parent.mkdir(parents=True, exist_ok=True)
        Path(self.backup_path).mkdir(parents=True, exist_ok=True)
        
        self._init_database()
    
    def _init_database(self):
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # ÌÜµÌï© Ìè¨ÏßÄÏÖò ÌÖåÏù¥Î∏î
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS unified_positions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    strategy TEXT NOT NULL,
                    symbol TEXT NOT NULL,
                    quantity REAL NOT NULL,
                    avg_price REAL NOT NULL,
                    current_price REAL NOT NULL,
                    currency TEXT NOT NULL,
                    krw_value REAL NOT NULL,
                    unrealized_pnl REAL NOT NULL,
                    unrealized_pnl_pct REAL NOT NULL,
                    entry_date DATETIME NOT NULL,
                    last_updated DATETIME NOT NULL,
                    UNIQUE(strategy, symbol)
                )
            ''')
            
            # Í±∞Îûò Í∏∞Î°ù ÌÖåÏù¥Î∏î
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS trades (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    strategy TEXT NOT NULL,
                    symbol TEXT NOT NULL,
                    action TEXT NOT NULL,
                    quantity REAL NOT NULL,
                    price REAL NOT NULL,
                    currency TEXT NOT NULL,
                    krw_amount REAL NOT NULL,
                    commission REAL NOT NULL,
                    realized_pnl REAL NOT NULL,
                    timestamp DATETIME NOT NULL
                )
            ''')
            
            # ÏÑ±Í≥º Ï∂îÏ†Å ÌÖåÏù¥Î∏î
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS performance (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    strategy TEXT NOT NULL,
                    date DATE NOT NULL,
                    total_investment REAL NOT NULL,
                    current_value REAL NOT NULL,
                    unrealized_pnl REAL NOT NULL,
                    realized_pnl REAL NOT NULL,
                    total_return_pct REAL NOT NULL,
                    trades_count INTEGER NOT NULL,
                    win_rate REAL NOT NULL,
                    created_at DATETIME NOT NULL,
                    UNIQUE(strategy, date)
                )
            ''')
            
            # ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú Î°úÍ∑∏
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS network_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    is_connected BOOLEAN NOT NULL,
                    latency REAL NOT NULL,
                    consecutive_failures INTEGER NOT NULL,
                    timestamp DATETIME NOT NULL
                )
            ''')
            
            # ÌôòÏú® Í∏∞Î°ù
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS exchange_rates (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    currency TEXT NOT NULL,
                    rate REAL NOT NULL,
                    timestamp DATETIME NOT NULL
                )
            ''')
            
            # Ïò§Î•ò Í∏∞Î°ù ÌÖåÏù¥Î∏î (NEW!)
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS error_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    strategy TEXT NOT NULL,
                    error_type TEXT NOT NULL,
                    error_message TEXT NOT NULL,
                    stack_trace TEXT,
                    timestamp DATETIME NOT NULL
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
            
        except Exception as e:
            logger.error(f"Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
    
    def save_position(self, position: UnifiedPosition):
        """Ìè¨ÏßÄÏÖò Ï†ÄÏû•"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO unified_positions 
                (strategy, symbol, quantity, avg_price, current_price, currency, 
                 krw_value, unrealized_pnl, unrealized_pnl_pct, entry_date, last_updated)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                position.strategy, position.symbol, position.quantity, position.avg_price,
                position.current_price, position.currency, position.krw_value,
                position.unrealized_pnl, position.unrealized_pnl_pct,
                position.entry_date.isoformat(), position.last_updated.isoformat()
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"Ìè¨ÏßÄÏÖò Ï†ÄÏû• Ïã§Ìå®: {e}")
    
    def load_all_positions(self) -> List[UnifiedPosition]:
        """Î™®Îì† Ìè¨ÏßÄÏÖò Î°úÎìú"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('SELECT * FROM unified_positions')
            rows = cursor.fetchall()
            conn.close()
            
            positions = []
            for row in rows:
                position = UnifiedPosition(
                    strategy=row[1], symbol=row[2], quantity=row[3], avg_price=row[4],
                    current_price=row[5], currency=row[6], krw_value=row[7],
                    unrealized_pnl=row[8], unrealized_pnl_pct=row[9],
                    entry_date=datetime.fromisoformat(row[10]),
                    last_updated=datetime.fromisoformat(row[11])
                )
                positions.append(position)
            
            return positions
            
        except Exception as e:
            logger.error(f"Ìè¨ÏßÄÏÖò Î°úÎìú Ïã§Ìå®: {e}")
            return []
    
    def save_trade(self, strategy: str, symbol: str, action: str, quantity: float, 
                   price: float, currency: str, krw_amount: float, commission: float = 0.0, 
                   realized_pnl: float = 0.0):
        """Í±∞Îûò Í∏∞Î°ù Ï†ÄÏû•"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO trades 
                (strategy, symbol, action, quantity, price, currency, krw_amount, 
                 commission, realized_pnl, timestamp)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                strategy, symbol, action, quantity, price, currency, krw_amount,
                commission, realized_pnl, datetime.now().isoformat()
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"Í±∞Îûò Í∏∞Î°ù Ï†ÄÏû• Ïã§Ìå®: {e}")
    
    def save_error_log(self, strategy: str, error_type: str, error_message: str, stack_trace: str = None):
        """Ïò§Î•ò Î°úÍ∑∏ Ï†ÄÏû• (NEW!)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO error_logs (strategy, error_type, error_message, stack_trace, timestamp)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                strategy, error_type, error_message, stack_trace, datetime.now().isoformat()
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"Ïò§Î•ò Î°úÍ∑∏ Ï†ÄÏû• Ïã§Ìå®: {e}")
    
    def save_performance(self, performance: StrategyPerformance):
        """ÏÑ±Í≥º Ï†ÄÏû•"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO performance 
                (strategy, date, total_investment, current_value, unrealized_pnl, 
                 realized_pnl, total_return_pct, trades_count, win_rate, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                performance.strategy, datetime.now().date().isoformat(),
                performance.total_investment, performance.current_value, performance.unrealized_pnl,
                performance.realized_pnl, performance.total_return_pct, performance.trades_count,
                performance.win_rate, datetime.now().isoformat()
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"ÏÑ±Í≥º Ï†ÄÏû• Ïã§Ìå®: {e}")
    
    def save_network_log(self, status: NetworkStatus):
        """ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú Î°úÍ∑∏ Ï†ÄÏû•"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO network_logs (is_connected, latency, consecutive_failures, timestamp)
                VALUES (?, ?, ?, ?)
            ''', (
                status.is_connected, status.latency, status.consecutive_failures,
                status.last_check.isoformat()
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"ÎÑ§Ìä∏ÏõåÌÅ¨ Î°úÍ∑∏ Ï†ÄÏû• Ïã§Ìå®: {e}")
    
    def backup_database(self):
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∞±ÏóÖ"""
        if not self.backup_enabled:
            return
        
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_file = Path(self.backup_path) / f"quint_core_backup_{timestamp}.db"
            
            # ÌååÏùº Î≥µÏÇ¨
            import shutil
            shutil.copy2(self.db_path, backup_file)
            
            logger.info(f"üì¶ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∞±ÏóÖ ÏôÑÎ£å: {backup_file}")
            
            # Ïò§ÎûòÎêú Î∞±ÏóÖ ÌååÏùº Ï†ïÎ¶¨ (30Ïùº Ïù¥ÏÉÅ)
            self._cleanup_old_backups()
            
        except Exception as e:
            logger.error(f"Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∞±ÏóÖ Ïã§Ìå®: {e}")
    
    def _cleanup_old_backups(self):
        """Ïò§ÎûòÎêú Î∞±ÏóÖ ÌååÏùº Ï†ïÎ¶¨"""
        try:
            backup_dir = Path(self.backup_path)
            cutoff_date = datetime.now() - timedelta(days=30)
            
            for backup_file in backup_dir.glob("quint_core_backup_*.db"):
                if backup_file.stat().st_mtime < cutoff_date.timestamp():
                    backup_file.unlink()
                    logger.debug(f"Ïò§ÎûòÎêú Î∞±ÏóÖ ÌååÏùº ÏÇ≠Ï†ú: {backup_file}")
                    
        except Exception as e:
            logger.error(f"Î∞±ÏóÖ ÌååÏùº Ï†ïÎ¶¨ Ïã§Ìå®: {e}")

# ============================================================================
# üéØ ÌÜµÌï© Ìè¨ÏßÄÏÖò Í¥ÄÎ¶¨Ïûê
# ============================================================================

class UnifiedPositionManager:
    """ÌÜµÌï© Ìè¨ÏßÄÏÖò Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú"""
    
    def __init__(self, data_manager: DataManager, currency_exchange: AutoCurrencyExchange):
        self.data_manager = data_manager
        self.currency_exchange = currency_exchange
        self.positions: Dict[str, UnifiedPosition] = {}
        self.load_positions()
    
    def load_positions(self):
        """Ï†ÄÏû•Îêú Ìè¨ÏßÄÏÖò Î°úÎìú"""
        try:
            positions = self.data_manager.load_all_positions()
            self.positions = {f"{pos.strategy}_{pos.symbol}": pos for pos in positions}
            logger.info(f"üìÇ Ìè¨ÏßÄÏÖò Î°úÎìú: {len(self.positions)}Í∞ú")
        except Exception as e:
            logger.error(f"Ìè¨ÏßÄÏÖò Î°úÎìú Ïã§Ìå®: {e}")
    
    def add_position(self, strategy: str, symbol: str, quantity: float, 
                    avg_price: float, currency: str):
        """Ìè¨ÏßÄÏÖò Ï∂îÍ∞Ä"""
        try:
            key = f"{strategy}_{symbol}"
            
            # Í∏∞Ï°¥ Ìè¨ÏßÄÏÖòÏù¥ ÏûàÏúºÎ©¥ ÌèâÍ∑†Îã®Í∞Ä Í≥ÑÏÇ∞
            if key in self.positions:
                existing = self.positions[key]
                total_quantity = existing.quantity + quantity
                total_cost = (existing.quantity * existing.avg_price) + (quantity * avg_price)
                new_avg_price = total_cost / total_quantity
                
                existing.quantity = total_quantity
                existing.avg_price = new_avg_price
                existing.last_updated = datetime.now()
            else:
                # ÏÉà Ìè¨ÏßÄÏÖò ÏÉùÏÑ±
                position = UnifiedPosition(
                    strategy=strategy,
                    symbol=symbol,
                    quantity=quantity,
                    avg_price=avg_price,
                    current_price=avg_price,
                    currency=currency,
                    krw_value=self.currency_exchange.convert_to_krw(quantity * avg_price, currency),
                    unrealized_pnl=0.0,
                    unrealized_pnl_pct=0.0,
                    entry_date=datetime.now(),
                    last_updated=datetime.now()
                )
                self.positions[key] = position
            
            # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•
            self.data_manager.save_position(self.positions[key])
            logger.info(f"‚ûï Ìè¨ÏßÄÏÖò Ï∂îÍ∞Ä: {strategy} {symbol} {quantity}")
            
        except Exception as e:
            logger.error(f"Ìè¨ÏßÄÏÖò Ï∂îÍ∞Ä Ïã§Ìå®: {e}")
    
    def remove_position(self, strategy: str, symbol: str, quantity: float = None):
        """Ìè¨ÏßÄÏÖò Ï†úÍ±∞ (Î∂ÄÎ∂Ñ/Ï†ÑÏ≤¥)"""
        try:
            key = f"{strategy}_{symbol}"
            
            if key not in self.positions:
                logger.warning(f"‚ö†Ô∏è Ìè¨ÏßÄÏÖò ÏóÜÏùå: {strategy} {symbol}")
                return
            
            position = self.positions[key]
            
            if quantity is None or quantity >= position.quantity:
                # Ï†ÑÏ≤¥ Ï†úÍ±∞
                del self.positions[key]
                # DBÏóêÏÑúÎèÑ Ï†úÍ±∞
                conn = sqlite3.connect(self.data_manager.db_path)
                cursor = conn.cursor()
                cursor.execute('DELETE FROM unified_positions WHERE strategy = ? AND symbol = ?', 
                             (strategy, symbol))
                conn.commit()
                conn.close()
                logger.info(f"‚ûñ Ìè¨ÏßÄÏÖò Ï†ÑÏ≤¥ Ï†úÍ±∞: {strategy} {symbol}")
            else:
                # Î∂ÄÎ∂Ñ Ï†úÍ±∞
                position.quantity -= quantity
                position.last_updated = datetime.now()
                self.data_manager.save_position(position)
                logger.info(f"‚ûñ Ìè¨ÏßÄÏÖò Î∂ÄÎ∂Ñ Ï†úÍ±∞: {strategy} {symbol} {quantity}")
                
        except Exception as e:
            logger.error(f"Ìè¨ÏßÄÏÖò Ï†úÍ±∞ Ïã§Ìå®: {e}")
    
    def update_current_prices(self, price_data: Dict[str, Dict[str, float]]):
        """ÌòÑÏû¨Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏"""
        try:
            for key, position in self.positions.items():
                strategy_prices = price_data.get(position.strategy, {})
                if position.symbol in strategy_prices:
                    old_price = position.current_price
                    new_price = strategy_prices[position.symbol]
                    
                    # Í∞ÄÍ≤© Î∞è ÏÜêÏùµ ÏóÖÎç∞Ïù¥Ìä∏
                    position.current_price = new_price
                    position.krw_value = self.currency_exchange.convert_to_krw(
                        position.quantity * new_price, position.currency
                    )
                    position.unrealized_pnl = (new_price - position.avg_price) * position.quantity
                    position.unrealized_pnl_pct = ((new_price - position.avg_price) / position.avg_price) * 100
                    position.last_updated = datetime.now()
                    
                    # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
                    self.data_manager.save_position(position)
                    
                    # ÌÅ∞ Î≥ÄÎèôÏãú Î°úÍ∑∏
                    price_change = abs((new_price - old_price) / old_price) * 100
                    if price_change > 5:  # 5% Ïù¥ÏÉÅ Î≥ÄÎèô
                        logger.info(f"üíπ {position.symbol}: {price_change:+.1f}% @ {new_price}")
                        
        except Exception as e:
            logger.error(f"ÌòÑÏû¨Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {e}")
    
    def get_portfolio_summary(self) -> Dict:
        """Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏöîÏïΩ"""
        try:
            summary = {
                'total_positions': len(self.positions),
                'total_krw_value': 0.0,
                'total_unrealized_pnl': 0.0,
                'by_strategy': {},
                'by_currency': {},
                'top_gainers': [],
                'top_losers': []
            }
            
            positions_with_pnl = []
            
            for position in self.positions.values():
                # Ï†ÑÏ≤¥ Ìï©Í≥Ñ
                summary['total_krw_value'] += position.krw_value
                summary['total_unrealized_pnl'] += self.currency_exchange.convert_to_krw(
                    position.unrealized_pnl, position.currency
                )
                
                # Ï†ÑÎûµÎ≥Ñ ÏßëÍ≥Ñ
                if position.strategy not in summary['by_strategy']:
                    summary['by_strategy'][position.strategy] = {
                        'count': 0, 'krw_value': 0.0, 'unrealized_pnl': 0.0
                    }
                
                summary['by_strategy'][position.strategy]['count'] += 1
                summary['by_strategy'][position.strategy]['krw_value'] += position.krw_value
                summary['by_strategy'][position.strategy]['unrealized_pnl'] += self.currency_exchange.convert_to_krw(
                    position.unrealized_pnl, position.currency
                )
                
                # ÌÜµÌôîÎ≥Ñ ÏßëÍ≥Ñ
                if position.currency not in summary['by_currency']:
                    summary['by_currency'][position.currency] = {'count': 0, 'krw_value': 0.0}
                
                summary['by_currency'][position.currency]['count'] += 1
                summary['by_currency'][position.currency]['krw_value'] += position.krw_value
                
                # ÏàòÏùµÎ•† Ï†ïÎ†¨Ïö©
                positions_with_pnl.append((position, position.unrealized_pnl_pct))
            
            # ÏÉÅÏúÑ/ÌïòÏúÑ Ï¢ÖÎ™©
            positions_with_pnl.sort(key=lambda x: x[1], reverse=True)
            
            summary['top_gainers'] = [
                {'symbol': pos.symbol, 'strategy': pos.strategy, 'pnl_pct': pnl_pct}
                for pos, pnl_pct in positions_with_pnl[:5]
            ]
            
            summary['top_losers'] = [
                {'symbol': pos.symbol, 'strategy': pos.strategy, 'pnl_pct': pnl_pct}
                for pos, pnl_pct in positions_with_pnl[-5:]
            ]
            
            # Ï¥ù ÏàòÏùµÎ•†
            if summary['total_krw_value'] > 0:
                summary['total_return_pct'] = (summary['total_unrealized_pnl'] / 
                                             (summary['total_krw_value'] - summary['total_unrealized_pnl'])) * 100
            else:
                summary['total_return_pct'] = 0.0
            
            return summary
            
        except Exception as e:
            logger.error(f"Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏöîÏïΩ Ïã§Ìå®: {e}")
            return {}

# ============================================================================
# üèÜ ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ ÌÜµÌï© ÏΩîÏñ¥ ÏãúÏä§ÌÖú
# ============================================================================

class QuintProjectCore:
    """ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ ÌÜµÌï© ÏΩîÏñ¥ ÏãúÏä§ÌÖú"""
    
    def __init__(self, config_path: str = "settings.yaml"):
        logger.info("üèÜ ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ ÌÜµÌï© ÏΩîÏñ¥ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî")
        
        # ÏÑ§Ï†ï Î°úÎìú
        self.config = self._load_config(config_path)
        
        # ÌïµÏã¨ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
        self.currency_exchange = AutoCurrencyExchange()
        self.notification_manager = NotificationManager()
        self.data_manager = DataManager()
        self.position_manager = UnifiedPositionManager(self.data_manager, self.currency_exchange)
        self.network_monitor = NetworkMonitor(self)
        self.error_monitor = EmergencyErrorMonitor(self)  # NEW!
        
        # Ï†ÑÎûµ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
        self.strategies = {}
        self._init_strategies()
        
        # ÏÉÅÌÉú Î≥ÄÏàò
        self.is_running = False
        self.emergency_mode = False
        self.last_health_check = datetime.now()
        
    def _load_config(self, config_path: str) -> Dict:
        """ÏÑ§Ï†ï ÌååÏùº Î°úÎìú"""
        try:
            if Path(config_path).exists():
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                logger.info(f"‚úÖ ÏÑ§Ï†ï ÌååÏùº Î°úÎìú: {config_path}")
                return config
            else:
                logger.warning(f"‚ö†Ô∏è ÏÑ§Ï†ï ÌååÏùº ÏóÜÏùå: {config_path}, Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©")
                return self._get_default_config()
        except Exception as e:
            logger.error(f"ÏÑ§Ï†ï ÌååÏùº Î°úÎìú Ïã§Ìå®: {e}")
            return self._get_default_config()
    
    def _get_default_config(self) -> Dict:
        """Í∏∞Î≥∏ ÏÑ§Ï†ï"""
        return {
            'system': {'environment': 'development', 'debug_mode': True},
            'us_strategy': {'enabled': False},
            'japan_strategy': {'enabled': False},
            'india_strategy': {'enabled': False},
            'crypto_strategy': {'enabled': False}
        }
    
    def _init_strategies(self):
        """Ï†ÑÎûµ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî"""
        logger.info("üéØ Ï†ÑÎûµ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏãúÏûë")
        
        # üá∫üá∏ ÎØ∏Íµ≠ Ï£ºÏãù Ï†ÑÎûµ
        if self.config.get('us_strategy', {}).get('enabled', False) and US_AVAILABLE:
            try:
                self.strategies['us'] = USStrategy()
                logger.info("‚úÖ ÎØ∏Íµ≠ Ï£ºÏãù Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
            except Exception as e:
                logger.error(f"‚ùå ÎØ∏Íµ≠ Ï£ºÏãù Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
                self.error_monitor.record_strategy_error('us_init', e)
        
        # üáØüáµ ÏùºÎ≥∏ Ï£ºÏãù Ï†ÑÎûµ
        if self.config.get('japan_strategy', {}).get('enabled', False) and JP_AVAILABLE:
            try:
                self.strategies['japan'] = JPStrategy()
                logger.info("‚úÖ ÏùºÎ≥∏ Ï£ºÏãù Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
            except Exception as e:
                logger.error(f"‚ùå ÏùºÎ≥∏ Ï£ºÏãù Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
                self.error_monitor.record_strategy_error('japan_init', e)
        
        # üáÆüá≥ Ïù∏ÎèÑ Ï£ºÏãù Ï†ÑÎûµ
        if self.config.get('india_strategy', {}).get('enabled', False) and IN_AVAILABLE:
            try:
                self.strategies['india'] = INStrategy()
                logger.info("‚úÖ Ïù∏ÎèÑ Ï£ºÏãù Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
            except Exception as e:
                logger.error(f"‚ùå Ïù∏ÎèÑ Ï£ºÏãù Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
                self.error_monitor.record_strategy_error('india_init', e)
        
        # üí∞ ÏïîÌò∏ÌôîÌèê Ï†ÑÎûµ
        if self.config.get('crypto_strategy', {}).get('enabled', False) and CRYPTO_AVAILABLE:
            try:
                self.strategies['crypto'] = CryptoStrategy()
                logger.info("‚úÖ ÏïîÌò∏ÌôîÌèê Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
            except Exception as e:
                logger.error(f"‚ùå ÏïîÌò∏ÌôîÌèê Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
                self.error_monitor.record_strategy_error('crypto_init', e)
        
        logger.info(f"üéØ ÌôúÏÑ±ÌôîÎêú Ï†ÑÎûµ: {list(self.strategies.keys())}")
    
    async def start(self):
        """ÏãúÏä§ÌÖú ÏãúÏûë"""
        logger.info("üöÄ ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ ÌÜµÌï© ÏãúÏä§ÌÖú ÏãúÏûë")
        
        try:
            self.is_running = True
            
            # ÌôòÏú® Ï†ïÎ≥¥ Ï¥àÍ∏∞ ÏóÖÎç∞Ïù¥Ìä∏
            await self.currency_exchange.update_exchange_rates()
            
            # ÏãúÏûë ÏïåÎ¶º
            await self.notification_manager.send_alert(
                "üöÄ ÏãúÏä§ÌÖú ÏãúÏûë",
                f"ÌÄ∏Ìä∏ÌîÑÎ°úÏ†ùÌä∏ ÌÜµÌï© ÏãúÏä§ÌÖúÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§.\n"
                f"ÌôúÏÑ±ÌôîÎêú Ï†ÑÎûµ: {', '.join(self.strategies.keys())}\n"
                f"ÏùëÍ∏âÎß§ÎèÑ ÏãúÏä§ÌÖú: {'‚úÖ ÌôúÏÑ±Ìôî' if EMERGENCY_SELL_ON_ERROR else '‚ùå ÎπÑÌôúÏÑ±Ìôî'}\n"
                f"ÌôòÍ≤Ω: {self.config.get('system', {}).get('environment', 'unknown')}"
            )
            
            # Î∞±Í∑∏ÎùºÏö¥Îìú ÌÉúÏä§ÌÅ¨ ÏãúÏûë
            tasks = [
                asyncio.create_task(self._main_loop()),
                asyncio.create_task(self.network_monitor.start_monitoring()),
                asyncio.create_task(self._periodic_tasks())
            ]
            
            # Î™®Îì† ÌÉúÏä§ÌÅ¨ Ïã§Ìñâ
            await asyncio.gather(*tasks)
            
        except Exception as e:
            logger.error(f"ÏãúÏä§ÌÖú ÏãúÏûë Ïã§Ìå®: {e}")
            self.error_monitor.record_strategy_error('system_start', e)
            await self.shutdown()Ïù¥ Î∂ÄÎ∂ÑÏù¥ ÎÅäÏñ¥ÏßÑ Í≥≥ÏûÖÎãàÎã§! üîß
